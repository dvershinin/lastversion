{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"lastversion","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p> <p>A tiny command-line utility that helps to answer a simple question:</p> <p>What is the latest stable version for a project?</p> <p>... and, optionally, download/install it.</p> <p><code>lastversion</code> allows finding well-formatted, the latest release version of a project from these   supported locations:</p> <ul> <li>GitHub</li> <li>GitLab</li> <li>BitBucket</li> <li>PyPI</li> <li>Mercurial</li> <li>SourceForge</li> <li>Wikipedia</li> <li>WordPress plugin directory</li> <li>Arbitrary software sites which publish releases in RSS/ATOM feeds</li> </ul>"},{"location":"#why-you-need-lastversion","title":"Why you need <code>lastversion</code>","text":"<p>In general, quite many project authors complicate finding the latest version by:</p> <ul> <li> <p>Creating a formal release that is clearly a Release Candidate (<code>rc</code> in tag), but forgetting to     mark it as a pre-release</p> </li> <li> <p>Putting extraneous text in release tag e.g. <code>release-1.2.3</code> or <code>name-1.2.3-2019</code> anything fancy      like that</p> </li> <li> <p>Putting or not putting the <code>v</code> prefix inside release tags. Today yes, tomorrow not. I'm not     consistent about it myself :)</p> </li> <li> <p>Switching from one version format to another, e.g. <code>v20150121</code> to <code>v2.0.1</code></p> </li> </ul> <p>There is no consistency in human beings.</p> <p>To deal with all this mess and get a well-formatted, last stable version (or download  URL!) on the command line, you can use <code>lastversion</code>.</p> <p><code>lastversion</code> is particularly useful in automated build systems where tracking the latest release versions is essential.</p> <p><code>lastversion</code> does a little bit of AI to detect if releasers mistakenly filed a beta version as a  stable release. It incorporates logic for cleaning up human inconsistency from  version information.</p>"},{"location":"#synopsis","title":"Synopsis","text":"<pre><code>lastversion apache/incubator-pagespeed-ngx \n#&gt; 1.13.35.2\n\nlastversion download apache/incubator-pagespeed-ngx \n#&gt; downloaded incubator-pagespeed-ngx-v1.13.35.2-stable.tar.gz\n\nlastversion download apache/incubator-pagespeed-ngx -o pagespeed.tar.gz \n#&gt; downloads with chosen filename\n\nlastversion https://transmissionbt.com/\n#&gt; 3.0\n\nlastversion format \"mysqld  Ver 5.6.51-91.0 for Linux\"\n#&gt; 5.6.51\n</code></pre>"},{"location":"#installation-for-rpm-based-systems","title":"Installation for RPM-based systems","text":"<p>Supported:</p> <ul> <li>CentOS/RHEL 7, 8, 9 including clones like AlmaLinux and Rocky Linux</li> <li>Amazon Linux 2, Amazon Linux 2023</li> <li>Fedora Linux</li> </ul> <pre><code>sudo yum -y install https://extras.getpagespeed.com/release-latest.rpm\nsudo yum -y install lastversion\n</code></pre>"},{"location":"#installation-for-other-systems","title":"Installation for other systems","text":"<p>Installing with <code>pip</code> is easiest:</p> <pre><code>pip install lastversion\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Typically, you would just pass a repository URL (or repo owner/name to it) as the only argument,  e.g.:</p> <pre><code>lastversion https://github.com/gperftools/gperftools\n</code></pre> <p>Equivalently accepted invocation with the same output is:</p> <pre><code>lastversion gperftools/gperftools\n</code></pre> <p>If you're lazy to even copy-paste a project's URL, you can just type its name as argument, which  will use repository search API (slower). Helps to answer what is the latest Linux version:</p> <pre><code>lastversion linux\n</code></pre> <p>Or wondering what is the latest version of WordPress? </p> <pre><code>lastversion wordpress\n</code></pre> <p>A special value of <code>self</code> for the main argument, will look up the last release of <code>lastversion</code>  itself.</p> <p>For more options to control output or behavior, see <code>--help</code> output:    </p> <pre><code>usage: lastversion [-h] [--pre] [--sem {major,minor,patch,any}] [-v]\n                   [-d [FILENAME]] [--format {version,assets,source,json,tag}]\n                   [--assets] [--source] [-gt VER] [-b MAJOR] [--only REGEX]\n                   [--exclude REGEX] [--filter REGEX] [--having-asset [ASSET]]\n                   [-su] [--even]\n                   [--changelog]\n                   [--at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local,helm_chart,wiki,system,wp,gitea}]\n                   [-y] [--version]\n                   [{get,download,extract,unzip,test,format,install,update-spec}]\n                   &lt;repo URL or string&gt;\n\nFind the latest software release.\n\npositional arguments:\n  {get,download,extract,unzip,test,format,install,update-spec}\n                        Action to run. Default: get\n  &lt;repo URL or string&gt;  Repository in format owner/name or any URL that\n                        belongs to it, or a version string\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --pre                 Include pre-releases in potential versions\n  --sem {major,minor,patch,any}\n                        Semantic versioning level base to print or compare\n                        against\n  -v, --verbose         Will give you an idea of what is happening under the\n                        hood, -vv to increase verbosity level\n  -d [FILENAME], -o [FILENAME], --download [FILENAME], --output [FILENAME]\n                        Download with custom filename\n  --format {version,assets,source,json,tag}\n                        Output format\n  --assets              Returns assets download URLs for last release\n  --source              Returns only source URL for last release\n  -gt VER, --newer-than VER\n                        Output only if last version is newer than given\n                        version\n  -b MAJOR, --major MAJOR, --branch MAJOR\n                        Only consider releases of a specific major version,\n                        e.g. 2.1.x\n  --only REGEX          Only consider releases containing this text. Useful\n                        for repos with multiple projects inside\n  --exclude REGEX       Only consider releases NOT containing this text.\n                        Useful for repos with multiple projects inside\n  --even                Only even versions like 1.[2].x, or 3.[6].x are\n                        considered as stable                        \n  --filter REGEX        Filters --assets result by a regular expression\n  --having-asset [ASSET]\n                        Only consider releases with this asset\n  -su, --shorter-urls   A tiny bit shorter URLs produced\n  --at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local,helm_chart,wiki,system,wp,gitea}\n                        If the repo argument is one word, specifies where to\n                        look up the project. The default is via internal\n                        lookup or GitHub Search\n  -y, --assumeyes       Automatically answer yes for all questions\n  --version             show program's version number and exit\n  --changelog           Generate RPM %changelog entry (1\u20137 concise bullets)\n</code></pre> <p>The <code>--format</code> will affect what kind of information from the last release and in which format will  be displayed, e.g.:</p> <ul> <li> <p><code>version</code> is the default. Simply outputs well-formatted version number of the latest release</p> </li> <li> <p><code>assets</code> will output a newline-separated list of assets URLs (if any), otherwise link to     sources archive</p> </li> <li> <p><code>source</code> will output link to source archive, no matter if the release has some assets added</p> </li> <li> <p><code>json</code> can be used by external Python modules or for debugging, it is dict/JSON output of an API     call that satisfied last version checks</p> </li> <li> <p><code>tag</code> will emit just the latest release's tag name, which useful if you're constructing download     URL yourself or need the tag name otherwise</p> </li> </ul> <p>An asset is a downloadable file that typically represents an executable, or otherwise  \"ready to launch\" project. It's what you see filed under formal releases, and is usually a compiled  (for a specific platform), program.</p> <p>Source files are either tarballs or zipballs of sources for the source code of release. </p> <p>You can display either assets or source URLs of the latest release, by passing the corresponding  <code>--format flag</code>, e.g. <code>--format source</code></p> <p>You also simply pass <code>--source</code> instead of <code>--format source</code>, and <code>--assets</code> instead of  <code>--format assets</code>, as in:</p> <pre><code>lastversion --assets mautic/mautic \n#&gt; https://github.com/mautic/mautic/archive/2.15.1/mautic-2.15.1.tar.gz\n</code></pre> <p>By default, <code>lastversion</code> filters output of <code>--assets</code> to be OS-specific. Who needs <code>.exe</code> on Linux?</p> <p>To override this behavior, you can use <code>--filter</code>, which has a regular expression as its argument. To disable OS filtering, use <code>--filter .</code>, this will match everything.</p> <p>You can naturally use <code>--filter</code> in place where you would use <code>grep</code>, e.g.  <code>lastversion --assets --filter win REPO</code></p>"},{"location":"#use-case-work-with-a-multi-project-repository","title":"Use case: Work with a multi-project repository","text":"<p>Sometimes a single repository actually hosts many components, and creates releases that have separate version line for each component. </p> <p>To help <code>lastversion</code> get a component's version for such repos, use <code>--only</code> and <code>--exclude</code>  switches. They make <code>lastversion</code> look at only those releases which are tagged (or not) with specified  strings.</p> <p>Example:</p> <pre><code>lastversion --only chart https://github.com/lastversion-test-repos/autoscaler\n</code></pre> <p>The above will report <code>9.16.0</code>.</p> <pre><code>lastversion --exclude chart https://github.com/lastversion-test-repos/autoscaler\n</code></pre> <p>The above will report a non-chart latest version, <code>1.23.0</code>.</p> <p>Useful for hard cases, you can pass in regular expressions for both arguments, by prepending them  with tilde, like so:</p> <pre><code>lastversion --only '~-po.-' https://github.com/lastversion-test-repos/autoscaler\n</code></pre> <p>The above will consider only releases tagged with -pod-, or -pov-, etc.</p>"},{"location":"#use-case-how-to-download-the-latest-version-of-something","title":"Use case: How to download the latest version of something","text":"<p>You can also use <code>lastversion</code> to download assets/sources for the latest release.</p> <p>Download the most recent Mautic source release:</p> <pre><code>lastversion download mautic/mautic \n</code></pre> <p>Customize downloaded filename (works only for sources, which is the default):</p> <pre><code>lastversion download mautic/mautic -o mautic.tar.gz\n</code></pre> <p>You can also directly fetch and extract the latest release's file into the current working directory  by using <code>extract</code> command:</p> <pre><code>lastversion extract wordpress\n</code></pre> <p>You can have <code>lastversion</code> output sources/assets URLs and have those downloaded by  something else:    </p> <pre><code>wget $(lastversion --assets mautic/mautic)\n</code></pre> <p>This will download all assets of the newest stable Mautic, which are two zip files.</p> <p>How this works: <code>lastversion</code> outputs all asset URLs, each on a new line, and <code>wget</code> is smart  enough to download each URL. Magic :)</p> <p>For releases that have no assets added, it will download the source archive.  </p> <p>To always download the source, use <code>--source</code> instead:</p> <pre><code>wget $(lastversion --source mautic/mautic)  \n</code></pre>"},{"location":"#use-case-download-specific-asset-under-specified-filename","title":"Use case: Download specific asset under specified filename","text":"<p>If you want to download specific asset of the last version's release and save the downloaded file  under a desired name, combine <code>-d</code> option (for download name) and <code>--filter</code> for specifying assets   filter.</p> <p>Example:</p> <pre><code>lastversion --pre Aircoookie/WLED --format assets --filter ESP32.bin -d ESP32.bin\n</code></pre>"},{"location":"#use-case-get-the-last-version-betas-are-fine","title":"Use case: Get the last version (betas are fine)","text":"<p>We consider the latest release is the one that is stable / not marked as beta. If you think otherwise, then pass <code>--pre</code> switch and if the latest version of repository is a  pre-release, then you'll get its version instead:</p> <pre><code>lastversion --pre mautic/mautic \n#&gt; 2.15.2b0\n</code></pre>"},{"location":"#use-case-version-of-a-specific-branch","title":"Use case: version of a specific branch","text":"<p>For some projects, there may be several stable releases available simultaneously, in different branches. An obvious example is PHP. You can use <code>--major</code> flag to specify the major release version to match with, to help you find the latest stable release of a branch, like so:</p> <pre><code>lastversion php/php-src --major 7.2\n</code></pre> <p>This will give you current stable version of PHP 7.2.x, e.g. <code>7.2.28</code>.</p> <p>Branch selector is easy to be specified after semicolon, and together with the search API, a clean invocation for the same would be:</p> <pre><code>lastversion php:7.2\n</code></pre> <p>The branch selector can also be used to get specific release details, e.g.:</p> <pre><code>lastversion php:7.2.33 --assets\n</code></pre>"},{"location":"#use-case-releases-with-specific-assets","title":"Use case: releases with specific assets","text":"<p>Sometimes a project makes nice formal releases but delay in uploading assets for releases. And you might be interested in specific asset type always. Then you can make <code>lastversion</code> consider as latest only the last release with specific asset name. Easy with the <code>--having-asset</code> switch:</p> <pre><code>lastversion telegramdesktop/tdesktop --having-asset \"Linux 64 bit: Binary\"\n</code></pre> <p>The argument value to <code>--having-asset</code> can be made as regular expression. For this, prepend it  with tilde sign. E.g. to get releases with macOS installers:</p> <pre><code>lastversion telegramdesktop/tdesktop --having-asset \"~\\.dmg$\"\n</code></pre> <p>You can pass no value to <code>--having-asset</code> at all. Then <code>lastversion</code> will only return the latest  release which has any assets added to it:</p> <pre><code>lastversion telegramdesktop/tdesktop --having-asset\n</code></pre>"},{"location":"#use-case-version-of-an-operating-system","title":"Use case: version of an operating system","text":"<p>The operating systems are usually not versioned through GitHub releases or such. It is a challenge to get the last stable version of an OS other than from its website, or other announcement channels.</p> <p>An easy compromise that <code>lastversion</code> does about this, is hard coding well-known OS names, and using Wikipedia behind the scenes:</p> <pre><code>lastversion rocky  #&gt; 8.4 \nlastversion windows  #&gt; 10.0.19043.1081\nlastversion ios  #&gt; 14.6\n</code></pre> <p>You can supply a fully qualified URL to a Wikipedia page for an OS/software project to get version from there, e.g.:</p> <pre><code>lastversion https://en.wikipedia.org/wiki/Rocky_Linux  #&gt; 8.4\n</code></pre>"},{"location":"#special-use-case-nginx-stable-vs-mainline-branch-version","title":"Special use case: NGINX stable vs mainline branch version","text":"<pre><code>lastversion https://nginx.org --major stable #&gt; 1.16.1\nlastversion https://nginx.org --major mainline #&gt; 1.17.9\n</code></pre> <p>Behind the scenes, this checks with <code>hg.nginx.org</code> which is a Mercurial web repo. Those are supported as well, e.g.</p> <pre><code>lastversion https://hg.example.com/project/\n</code></pre> <p>Mercurial repositories are rather rare these days, but support has been added primarily for NGINX.</p>"},{"location":"#special-use-case-find-the-release-of-a-pypi-project","title":"Special use case: find the release of a PyPI project","text":"<p>Most Python libraries/apps are hosted on PyPI. To check versions of a project on PyPI, you can use:</p> <pre><code>lastversion https://pypi.org/project/requests/\n</code></pre> <p>If you prefer using a shorter repo name, ensure <code>--at pip</code> switch, like so:</p> <pre><code>lastversion requests --at pip\n</code></pre>"},{"location":"#install-an-rpm-asset","title":"Install an RPM asset","text":"<p>If a project provides <code>.rpm</code> assets and your system has <code>yum</code> or <code>dnf</code>, you can install the project's  RPM directly, like so:</p> <pre><code>sudo lastversion install mailspring\n</code></pre> <p>This finds MailSpring, gets its latest release info,  filters assets for <code>.rpm</code> and passes it to <code>yum</code> / <code>dnf</code>. </p> <p>You can even set up an auto-updater cron job which will ensure you are on the latest version of a  package, like so:</p> <pre><code>@daily /usr/bin/lastversion install mailspring -y 2&gt;/dev/null\n</code></pre> <p>If the Mailspring GitHub repo posts a release with newer <code>.rpm</code>, then it will be automatically  installed, making sure you are running the latest and greatest Mailspring version.</p> <p>You'll even get an email alert after update (standard cron feature).</p> <p>Needless to say, more often than not, such RPM packages have no idea about all potentially missing dependencies. Thus, only use <code>lastversion install ...</code> if the software is missing from the base <code>yum</code> repositories.</p>"},{"location":"#install-an-appimage","title":"Install an AppImage","text":"<p>If a project provides <code>.AppImage</code>, you can install those directly using <code>lastversion</code>. The <code>AppImage</code> is self-contained Linux executable file. What <code>lastversion</code> does for you, is fetch the latest release's <code>AppImage</code>, installs it under <code>~/Applications/&lt;app&gt;</code> and makes it executable. Just run:</p> <pre><code>lastversion install fluent-reader\n</code></pre>"},{"location":"#test-version-parser","title":"Test version parser","text":"<p>The <code>test</code> command can be used for troubleshooting or simply well formatting a string with version:</p> <pre><code>lastversion test 'blah-1.2.3-devel' # &gt; 1.2.3.dev0\nlastversion test '1.2.x' # &gt; False (no clear version)\nlastversion test '1.2.3-rc1' # &gt; 1.2.3rc1\n</code></pre>"},{"location":"#scripting-with-lastversion-in-bash","title":"Scripting with <code>lastversion</code> in <code>bash</code>","text":""},{"location":"#semantic-versioning-support","title":"Semantic versioning support","text":"<p>Sometimes you only want to check updates for a specific semantic versioning level. Does a project have a new minor release? Does a project have a new major release? To print just the necessary semantic versioning base, use <code>--sem</code> option.</p> <p>Acceptable values are <code>major</code>, <code>minor</code>, and <code>patch</code>.</p> <pre><code>lastversion wordpress --sem major\n#&gt; 5\n</code></pre> <pre><code>lastversion wordpress --sem minor\n#&gt; 5.9\n</code></pre> <pre><code>lastversion wordpress --sem patch\n#&gt; 5.9.3\n</code></pre> <p>The value <code>--sem patch</code> can be used to normalize a given result to semantic versioning, if a project doesn't follow the semantics strictly. E.g. sometimes WordPress would publish an x.y release while it's implicitly x.y.0. So let's say WordPress released \"5.10\":</p> <pre><code>lastversion wordpress --sem patch\n#&gt; 5.10.0\n</code></pre>"},{"location":"#format-any-version-string","title":"Format any version string","text":"<p>Say you ran <code>mysqld --version</code> and got this output:</p> <p>mysqld  Ver 5.6.51-91.0 for Linux on x86_64 (Percona Server (GPL), Release 91.0, Revision b59139e)</p> <p>This is rather hard to parse in bash if you want to just extract the major MySQL server version.</p> <p><code>lastversion</code> can easily parse out and give the desired information based on desired semantic  versioning level:</p> <pre><code>lastversion --sem major format \"mysqld  Ver 5.6.51-91.0 for Linux on x86_64 (Percona Server (GPL) , Release 91.0, Revision b59139e)\" \n#&gt; 5\n</code></pre>"},{"location":"#compare-arbitrary-versions","title":"Compare arbitrary versions","text":"<p>Use <code>lastversion</code> for easy comparison of versions on the command line. Compare two versions, the command will output the highest version:</p> <pre><code>lastversion 1.2.3 -gt 1.2.4\n#&gt; 1.2.4\n</code></pre> <p>See the exit codes below, to find whether the first argument is a higher version, or the second.</p> <p>The <code>--sem</code> option described earlier will affect both what's being printed and what semantic versioning base level is being compared, thus the result.</p>"},{"location":"#check-for-new-release","title":"Check for NEW release","text":"<p>When you're building some upstream package, and you did this before, there is a known \"last build\"  version. Automatic builds become easy with:</p> <pre><code>CURRENTLY_BUILT_VER=1.2.3 # stored somewhere, e.g. spec file in my case\nLAST_VER=$(lastversion repo/owner -gt ${CURRENTLY_BUILT_VER})\nif [[ $? -eq 0 ]]; then\n  # LAST_VER is newer, update and trigger build\n  # ....\nfi\n</code></pre> <p>Here, the <code>-gt</code> is actually a switch passed to <code>lastversion</code>, which acts in a similar fashion to  <code>-gt</code> comparison in bash.</p> <p>There is more to it if you want to make this reliable. See my ranting on  RPM auto-builds with <code>lastversion</code></p>"},{"location":"#check-if-there-is-a-newer-kernel-for-your-linux-machine","title":"Check if there is a newer kernel for your Linux machine","text":"<pre><code>LATEST_KERNEL=$(lastversion linux -gt $(uname -r | cut -d '-' -f 1))\nif [[ $? -eq 0 ]]; then\n  echo \"I better update my kernel now, because ${LATEST_KERNEL} is there\"\nelse \n  echo \"My kernel is latest and greatest.\"\nfi \n</code></pre>"},{"location":"#exit-status-codes","title":"Exit Status codes","text":"<p>Exit status codes are the usual means of communicating a command's execution success or failure.  So <code>lastversion</code> follows this: successful command returns <code>0</code> while anything else is an error of  some kind. For example, when the latest stable release version if found, <code>0</code> is returned. <code>0</code> is also returned for <code>-gt</code> comparison when leftmost argument is newer than rightmost argument.</p> <p>Exit status code <code>1</code> is returned for cases like no release tag existing for repository at all, or  repository does not exist.</p> <p>Exit status code <code>2</code> is returned for <code>-gt</code> version comparison negative lookup, that is when rightmost argument is newer than leftmost argument.</p> <p>Exit status code <code>3</code> is returned when filtering assets of last release yields empty URL set  (no match)</p>"},{"location":"#tips","title":"Tips","text":"<p>Getting the latest version is heavy on the API, because GitHub does not allow to fetch tags in  chronological order, and some repositories switch from one version format to another, so we can't  just consider the highest version to be latest. We have to fetch every tag's commit date, and see if it's actually more recent. Thus, it's slower with larger repositories, which have potentially a lot of tags.</p> <p>Thus, <code>lastversion</code> makes use of caching API response to be fast and light on GitHub API, It does conditional ETag validation, which, as per GitHub API will not count towards rate limit. The cache is stored in <code>~/.cache/lastversion</code> on Linux systems.</p> <p>It is much recommended to set up your GitHub API token. Bare API token is enough, you may deselect all permissions.  You can then increase your rate limit by adding the following <code>~/.bashrc</code> file:</p> <pre><code>export GITHUB_API_TOKEN=xxxxxxxxxxxxxxx\n</code></pre> <p>You can use either <code>GITHUB_API_TOKEN</code> or <code>GITHUB_TOKEN</code> environment variable. The former has priority.</p> <p>For GitLab, you can use a Personal Access Token:</p> <pre><code>export GITLAB_PA_TOKEN=xxxxxxxxxxxxxxx\n</code></pre> <p>Then run <code>source ~/.bashrc</code>. After this, <code>lastversion</code> will use it to get larger API calls allowance from GitHub.</p>"},{"location":"#usage-in-a-python-module","title":"Usage in a Python module","text":"<p>You can use <code>lastversion.has_update(...)</code> to find whether an update for existing version of  something is available, simply:</p> <pre><code>from lastversion import has_update\nlatest_version = has_update(repo=\"mautic/mautic\", current_version='1.2.3')\nif latest_version:\n    print(f'Newer Mautic version is available: {latest_version}')\nelse:\n    print('No update is available')\n</code></pre> <p>The <code>lastversion.has_update(...)</code> function accepts any URL from a repository (or its short name , e.g. <code>owner/name</code>) and you should pass an existing/current version.</p> <p>If you are checking version of a project on PyPi, supply an additional <code>at='pip'</code> argument, in order to avoid passing the full PyPI URI of a project, and remove ambiguity with GitHub hosted  projects. For example, checking for newer Requests library:</p> <pre><code>from lastversion import has_update\nlatest_version = has_update(repo=\"requests\", at='pip', current_version='1.2.3')\nif latest_version:\n    print('Newer Requests library is available: {latest_version}')\nelse:\n    print('No update is available')\n</code></pre> <p>The <code>has_update</code> function returns either:</p> <ul> <li>The Version object</li> <li><code>False</code> if there is no newer version than the one given</li> </ul> <p>Alternatively, invoke <code>lastversion.latest(...)</code> function to get the latest version information  for a repo.  </p> <pre><code>from lastversion import latest\nfrom packaging import version\n\nlatest_mautic_version = latest(\"mautic/mautic\", output_format='version', pre_ok=True)\n\nprint(f'Latest Mautic version: {latest_mautic_version}')\n\nif latest_mautic_version &gt;= version.parse('1.8.1'):\n    print('It is newer')\n</code></pre> <p>With <code>output_format='version'</code> (the default), the function returns a  Version object, or  <code>None</code>. So you can do things like above, namely version comparison, checking dev status, etc.</p> <p>With <code>output_format='dict'</code>, a dictionary returned with the latest release information, or <code>False</code>. The dictionary keys vary between different project locations (GitHub vs BitBucket, for example), but are guaranteed to always have these keys:</p> <ul> <li><code>version</code>: Version   object, contains the found release version, e.g. <code>1.2.3</code></li> <li><code>source</code>: string, the identifier of the project source, e.g. <code>github</code>, or <code>gitlab</code></li> <li><code>tag_date</code>: datetime object, the release date, e.g. <code>2020-12-15 14:41:39</code></li> <li><code>from</code>: string, contains fully qualified URL of the project</li> <li><code>tag_name</code>: string, version control tag name corresponding to the release</li> </ul> <p>The <code>lastversion.latest</code> function accepts 3 arguments</p> <ul> <li><code>repo</code>, in format of <code>&lt;owner&gt;/&lt;name&gt;</code>, or any URL under this repository, e.g. <code>https://github.com/dvershinin/lastversion/issues</code> </li> <li><code>format</code>, which accepts the same values as when you run <code>lastversion</code> interactively, as well as  <code>dict</code> to return a dictionary as described above</li> <li><code>pre_ok</code>, boolean for whether to include pre-releases as potential versions</li> <li><code>at</code>, specifies project location when using one-word repo names, one of   <code>github</code>, <code>gitlab</code>, <code>bitbucket</code>, <code>pip</code>, <code>hg</code>, <code>sf</code>, <code>website-feed</code>, <code>local</code></li> </ul>"},{"location":"#using-in-continuous-integration","title":"Using in Continuous Integration","text":"<p>You can also use <code>lastversion</code> directly in your GitHub action workflows,  with <code>lastversion-action</code>.</p>"},{"location":"#hosted-api-option","title":"Hosted API Option","text":"<p>Prefer a hosted, no-install solution for getting the latest versions? Check out the lastversion API on RapidAPI. </p> <p>Highlights: - No Installation Needed: Access the latest release info of any project from any environment\u2014CI/CD pipelines, serverless functions, or front-end code\u2014without installing <code>lastversion</code>. - Multiple Endpoints: Fetch just the version, assets, or the full release details with flexible JSON responses. - Commercial Support: For users who need a quick, fully hosted solution (or can\u2019t install on certain systems), the API may be more convenient.</p> <p>Of course, the open-source CLI remains free and fully featured. This API is an optional hosted service.</p>"},{"location":"#feature-requests-and-enhancements","title":"Feature Requests and Enhancements","text":"<p>Only features that are essential to GitHub releases are prioritized. If your issue or suggested feature is outside the current focus, here's how you can help make it happen:</p> <ul> <li>Contribute: We encourage you to submit a pull request with your proposed changes or enhancement.</li> <li>Donate: If you'd like to see a feature developed but cannot contribute code, consider making a donation. Your donations help us allocate resources to work on additional features and improvements.</li> </ul>"},{"location":"#project-independence","title":"Project Independence","text":"<p>lastversion is an independent open-source project maintained by contributors. It is not affiliated with any commercial entities.</p> <p>This project is developed using JetBrains tools. </p>"},{"location":"README-ZH-CN/","title":"lastversion","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p> <p>\u4e00\u4e2a\u8f7b\u5de7\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5e2e\u52a9\u4f60\u67e5\u8be2\u4e00\u4e2a\u9879\u76ee/\u8f6f\u4ef6\u7684\u6700\u65b0\u7248\u672c\u53f7\u53ca\u5404\u79cd\u76f8\u5173\u4fe1\u606f\uff0c\u6bd4\u5982\u4e0b\u8f7d\u94fe\u63a5\u3002</p> <p><code>lastversion</code> \u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u7f51\u7ad9\u627e\u5230\u4e00\u4e2a\u9879\u76ee\u7684\u683c\u5f0f\u826f\u597d\u7684\u6700\u65b0\u7684\u7248\u672c\u53f7\u3002</p> <ul> <li>GitHub</li> <li>GitLab</li> <li>BitBucket</li> <li>PyPI</li> <li>Mercurial</li> <li>SourceForge</li> <li>Wikipedia</li> <li>\u4efb\u4f55\u4ee5 RSS/ATOM \u8ba2\u9605\u65b9\u5f0f\u53d1\u5e03\u8f6f\u4ef6\u7f51\u7ad9\u3002</li> </ul>"},{"location":"README-ZH-CN/#lastversion_1","title":"\u4e3a\u4ec0\u4e48\u9700\u8981 <code>lastversion</code>\uff1f","text":"<p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8bb8\u591a\u9879\u76ee\u4f5c\u8005\u7684\u4e00\u4e9b\u505a\u6cd5\u4f1a\u8ba9\u6211\u4eec\u96be\u4ee5\u5bfb\u627e\u4e00\u4e2a\u9879\u76ee\u7684\u6700\u65b0\u7248\u672c\u53ca\u5176\u7248\u672c\u53f7\u3002</p> <ul> <li>\u53d1\u5e03\u4e00\u4e2a\u5019\u9009\u7248\u672c\u7684\u65f6\u5019\u5fd8\u8bb0\u5c06\u5176\u6807\u8bb0\u4e3a\u9884\u53d1\u5e03\u7248\u672c\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u6b63\u5f0f\u7248\u672c\u53bb\u53d1\u5e03\u3002\u6bd4\u5982\u7248\u672c\u6807\u7b7e\u4e3a <code>v2.0.1-rc</code> \u4f46\u662f\u5728\u53d1\u5e03\u65f6\u5e76\u672a\u6807\u8bb0\u4e3a\u9884\u53d1\u5e03\u7248\u672c\u3002</li> <li>\u5728\u7248\u672c\u6807\u7b7e\u4e2d\u52a0\u5165\u65e0\u5173\u7684\u6587\u672c\uff0c\u4f8b\u5982 <code>release-1.2.3</code> \u6216 <code>name-1.2.3-2019</code>\uff0c\u6216\u8005\u5176\u5b83\u7c7b\u4f3c\u7684\u6587\u672c\u3002</li> <li>\u7248\u672c\u6807\u7b7e\u662f\u5426\u5e26\u6709 <code>v</code> \u524d\u7f00\uff1f\u4eca\u5929\u53ef\u80fd\u5e26\uff0c\u4f46\u660e\u5929\u53ef\u80fd\u5c31\u4e0d\u5e26\u4e86\u3002\u6211\u4e5f\u662f\u8fd9\u6837\u7684 :)\u3002</li> <li>\u5207\u6362\u5230\u53e6\u4e00\u79cd\u7248\u672c\u6807\u7b7e\u683c\u5f0f\uff0c\u4f8b\u5982\u4ece <code>v20150121</code> \u5207\u6362\u5230 <code>v2.0.1</code>\u3002</li> </ul> <p>\u4eba\u4e0e\u4eba\u4e4b\u95f4\u96be\u4ee5\u4fdd\u6301\u4e00\u81f4\u3002</p> <p>\u6709\u65f6\u5019\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u8f6f\u4ef6\u90fd\u6709\u4e00\u4e2a\u56fa\u5b9a\u683c\u5f0f\u7684\u7248\u672c\u53f7\uff0c<code>lastversion</code> \u53ef\u4ee5\u5e2e\u52a9\u4f60\uff0c\u5b83\u53ef\u4ee5\u8ba9\u4f60\u67e5\u8be2\u67d0\u4e2a\u9879\u76ee\u7684\u6700\u65b0\u7248\u672c\u7684\u540c\u65f6\u8fd4\u56de\u4e00\u4e2a\u56fa\u5b9a\u683c\u5f0f\u7684\u7248\u672c\u53f7\uff0c\u5e76\u53ef\u4ee5\u83b7\u53d6\u4e0b\u8f7d\u94fe\u63a5\u7b49\u989d\u5916\u4fe1\u606f\u3002</p> <p><code>lastversion</code> \u4e3b\u8981\u7528\u4e8e\u81ea\u52a8\u5316\u811a\u672c\uff0c\u6bd4\u5982\u81ea\u52a8\u66f4\u65b0\u548c\u6301\u7eed\u96c6\u6210\u7b49\u3002</p> <p>\u5c31\u50cf\u6211\u8fd9\u4e48\u505a</p> <p><code>lastversion</code> \u4f7f\u7528\u4e86\u7b80\u5355\u7684 AI \u6765\u53c2\u4e0e\u5230\u68c0\u6d4b\u4e2d\uff0c \u6bd4\u5982\u6e05\u7406\u7248\u672c\u53f7\u4e2d\u7684\u65e0\u7528\u4fe1\u606f\uff0c\u6bd4\u5982\u5c06 <code>name-v1.2.3</code> \u4fee\u6539\u4e3a <code>1.2.3</code>\uff0c \u4e5f\u7528\u5b83\u6765\u68c0\u6d4b\u53d1\u5e03\u8005\u662f\u5426\u6df7\u6dc6\u4e86\u6d4b\u8bd5\u7248\u548c\u7a33\u5b9a\u7248\u3002</p>"},{"location":"README-ZH-CN/#_1","title":"\u7b80\u4ecb","text":"<pre><code>lastversion apache/incubator-pagespeed-ngx \n#&gt; 1.13.35.2\n\nlastversion apache/incubator-pagespeed-ngx -d \n#&gt; downloaded incubator-pagespeed-ngx-v1.13.35.2-stable.tar.gz\n\nlastversion apache/incubator-pagespeed-ngx -d pagespeed.tar.gz \n#&gt; downloads with chosen filename\n\nlastversion https://transmissionbt.com/\n#&gt; 3.0\n</code></pre>"},{"location":"README-ZH-CN/#centosrhel-7-8-amazon-linux-2-lastversion","title":"\u5728 CentOS/RHEL 7, 8 \u6216 Amazon Linux 2 \u4e0a\u5b89\u88c5 <code>lastversion</code>","text":"<pre><code>sudo yum -y install https://extras.getpagespeed.com/release-latest.rpm\nsudo yum install lastversion\n</code></pre>"},{"location":"README-ZH-CN/#lastversion_2","title":"\u5728\u5176\u5b83\u7cfb\u7edf\u4e0a\u5b89\u88c5 <code>lastversion</code>","text":"<p>\u7528 <code>pip</code> \u5b89\u88c5\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002</p> <pre><code>pip install lastversion\n</code></pre>"},{"location":"README-ZH-CN/#_2","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>\u4e00\u822c\u6765\u8bf4\uff0c<code>lastversion</code> \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u4e00\u4e2a\u4ed3\u5e93\u7684 URL\uff08\u6216 \u7528\u6237\u540d/\u4ed3\u5e93\u540d\uff09\uff0c\u4f8b\u5982\uff1a</p> <pre><code>lastversion https://github.com/gperftools/gperftools\n</code></pre> <p>\u4e0e\u4e4b\u7b49\u4ef7\u7684\u547d\u4ee4\u4e3a</p> <pre><code>lastversion gperftools/gperftools\n</code></pre> <p>\u5982\u679c\u4f60\u60f3\u5077\u61d2\uff0c\u4e0d\u60f3\u590d\u5236\u7c98\u8d34\u9879\u76ee\u7684 URL\uff0c \u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u9879\u76ee\u7684\u540d\u5b57\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u5c06\u4f1a\u4f7f\u7528\u4ed3\u5e93\u641c\u7d22 API\uff08\u901f\u5ea6\u6bd4\u8f83\u6162\uff09\u3002</p> <p>\u4e0b\u9762\u7684\u8fd9\u6761\u547d\u4ee4\u53ef\u4ee5\u8ba9\u4f60\u77e5\u9053 Linux \u7684\u6700\u65b0\u7248\u672c\u3002</p> <pre><code>lastversion linux\n</code></pre> <p>\u6216\u8005\u67e5\u8be2 Wordpress \u7684\u6700\u65b0\u7248\u672c\u3002</p> <pre><code>lastversion wordpress\n</code></pre> <p><code>self</code> \u662f\u4e3b\u53c2\u6570\u4e2d\u7684\u4e00\u4e2a\u7279\u6b8a\u503c\uff0c\u5b83\u53ef\u4ee5\u67e5\u627e <code>lastversion</code> \u7684\u6700\u65b0\u7248\u672c\uff0c\u4f8b\u5982\uff1a</p> <pre><code>lastversion self\n</code></pre> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>--help</code> \u67e5\u770b\u548c\u8f93\u51fa\u63a7\u5236\uff08\u884c\u4e3a\uff09\u76f8\u5173\u7684\u9009\u9879\u3002 </p> <pre><code>usage: lastversion [-h] [--pre] [--verbose] [-d [FILENAME]]\n                   [--format {version,assets,source,json,tag}] [--assets]\n                   [--source] [-gt VER] [-b MAJOR] [--only ONLY]\n                   [--filter REGEX] [-su]\n                   [--at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local}]\n                   [-y] [--version]\n                   [action] &lt;repo or URL&gt;\n\nFind the latest software release.\n\npositional arguments:\n  action                Special action to run, e.g. download, install, test\n  &lt;repo or URL&gt;         GitHub/GitLab/BitBucket/etc. repository in format\n                        owner/name or any URL that belongs to it\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --pre                 Include pre-releases in potential versions\n  --verbose             Will give you an idea of what is happening under the hood\n  -d [FILENAME], --download [FILENAME]\n                        Download with custom filename\n  --format {version,assets,source,json,tag}\n                        Output format\n  --assets              Returns assets download URLs for last release\n  --source              Returns only source URL for last release\n  -gt VER, --newer-than VER\n                        Output only if last version is newer than given\n                        version\n  -b MAJOR, --major MAJOR, --branch MAJOR\n                        Only consider releases of a specific major version,\n                        e.g. 2.1.x\n  --only ONLY           Only consider releases containing this text. Useful\n                        for repos with multiple projects inside\n  --filter REGEX        Filters --assets result by a regular expression\n  --having-asset [ASSET]\n                        Only consider releases with this asset  \n  -su, --shorter-urls   A tiny bit shorter URLs produced\n  --at {github,gitlab,bitbucket,pip,hg,sf,website-feed,local}\n                        If the repo argument is one word, specifies where to\n                        look up the project. The default is via internal\n                        lookup or GitHub Search\n  -y, --assumeyes       Automatically answer yes for all questions\n  --version             show program's version number and exit\n</code></pre> <p><code>--format</code> \u9009\u9879\u5c06\u4f1a\u6307\u5b9a\u8f93\u51fa\u7684\u683c\u5f0f\u3002</p> <ul> <li><code>version</code> \u9ed8\u8ba4\u503c\uff0c\u8f93\u51fa\u683c\u5f0f\u6700\u65b0\u7684\uff0c\u683c\u5f0f\u826f\u597d\u7684\u7248\u672c\u53f7\u3002</li> <li><code>assets</code> \u4f1a\u4ee5\u6362\u884c\u5206\u5272\u7684\u6700\u65b0\u7248\u672c\u7684 asset \u7684 URL\uff08\u5982\u679c\u6709\u591a\u4e2a asset \u7684\u8bdd\uff09\uff0c\u5426\u5219\u5c06\u4e3a\u6700\u65b0\u6e90\u7801\u94fe\u63a5\uff08\u901a\u5e38\u4e3a .tar.gz \u6216 .zip\uff09\u3002</li> <li><code>source</code> \u5c06\u8f93\u51fa\u6700\u65b0\u6e90\u7801\u7684\u94fe\u63a5\uff08\u901a\u5e38\u4e3a .tar.gz \u6216 .zip\uff09\uff0c\u5373\u4f7f\u6700\u65b0\u7248\u672c\u540c\u65f6\u53d1\u5e03\u4e86\u5176\u5b83\u7684 asset\u3002</li> <li><code>json</code> \u6b64\u683c\u5f0f\u53ef\u4ee5\u88ab Python \u7a0b\u5e8f\u5904\u7406\u3002</li> <li><code>tag</code> \u53ea\u8f93\u51fa\u6700\u65b0\u7248\u672c\u7684\u6807\u7b7e\u540d\u3002</li> </ul> <p><code>asset</code> \u5728\u672c\u6587\u662f\u6307\u4e00\u4e2a\u53ef\u4e0b\u8f7d\u7684\u6587\u4ef6\uff0c \u4e00\u822c\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4f8b\u5982\u4e00\u4e2a\u9879\u76ee\u53d1\u5e03\u7684\u65f6\u5019\u4f1a\u8fde\u5e26\u53d1\u5e03\u5404\u4e2a\u5e73\u53f0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u8ba9\u7528\u6237\u65e0\u9700\u7f16\u8bd1\u6e90\u4ee3\u7801\u5373\u53ef\u4f7f\u7528\u3002</p> <p>\u4f60\u53ef\u4ee5\u67e5\u770b\u6700\u65b0\u7248\u672c\u7684 asset \u6216\u6e90\u4ee3\u7801\u6587\u4ef6\u7684 URL \u901a\u8fc7\u9009\u62e9\u9002\u5f53\u7684 <code>--format flag</code>\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>--source</code> \u53bb\u4ee3\u66ff <code>--format source</code>\uff0c\u7528 <code>--assets</code> \u4ee3\u66ff <code>--format assets</code>\uff0c\u4f8b\u5982\uff1a</p> <pre><code>lastversion --assets mautic/mautic \n#&gt; https://github.com/mautic/mautic/archive/2.15.1/mautic-2.15.1.tar.gz\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c <code>lastversion</code> \u4f1a\u6839\u636e\u4e0d\u540c\u7684 OS \u8fc7\u6ee4\u6389\u4e00\u4e9b <code>--assets</code> \u7684\u8f93\u51fa\u3002 \u5728 Linux \u4e0a\u8c01\u9700\u8981 <code>.exe</code> \u5462\uff1f</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>--filter</code> \u6765\u8986\u76d6\u6389\u8fd9\u4e00\u884c\u4e3a\uff0c \u5b83\u4f7f\u7528\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u6839\u636e OS \u8fc7\u6ee4\u6389 asset\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 <code>--filter</code> \u6765\u5339\u914d\u6240\u6709\u7684asset\u3002</p> <p>\u4f60\u4f60\u53ef\u4ee5\u5f88\u4f18\u96c5\u5730\u4f7f\u7528 <code>--filter</code> \u6765\u4ee3\u66ff <code>grep</code> \u547d\u4ee4\uff0c\u4f8b\u5982\uff1a <pre><code>lastversion --assets --filter win REPO\n</code></pre></p>"},{"location":"README-ZH-CN/#_3","title":"\u7528\u4f8b: \u4e0b\u8f7d\u6700\u65b0\u7248\u672c","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>lastversion</code> \u6765\u4e0b\u8f7d\u6700\u65b0\u7248\u672c\u7684 asset \u548c\u6e90\u4ee3\u7801\u3002</p> <p>\u4e0b\u8f7d\u6700\u65b0\u7684 Mautic \u6e90\u7801\uff1a</p> <pre><code>lastversion mautic/mautic --download \n</code></pre> <p>\u81ea\u5b9a\u4e49\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d\uff08\u53ea\u5bf9\u4e0b\u8f7d\u6e90\u4ee3\u7801\u6709\u6548\u5e76\u4e14\u6b64\u4e3a\u9ed8\u8ba4\u8bbe\u7f6e\uff09\uff1a</p> <pre><code>lastversion mautic/mautic --download mautic.tar.gz\n</code></pre> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>lastversion</code> \u8f93\u51fa\u6e90\u4ee3\u7801\u6216\u8005 asset \u7684 URL \u5e76\u4e0b\u8f7d\u5b83\uff0c\u4f8b\u5982\uff1a</p> <pre><code>wget $(lastversion --assets mautic/mautic)\n</code></pre> <p>\u4e0a\u9762\u8fd9\u884c\u547d\u4ee4\u4f1a\u4e0b\u8f7d\u6240\u6709\u7684\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u7684 asset\uff0c\u5373\u4e24\u4e2a <code>.zip</code> \u6587\u4ef6\u3002</p> <p>\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u80fd\u591f\uff1f \u56e0\u4e3a <code>lastversion</code> \u4f1a\u8f93\u51fa\u5728\u4e24\u4e2a <code>.zip</code> \u6587\u4ef6\u7684 URL \u5e76\u901a\u8fc7\u6362\u884c\u5206\u5272\uff0c<code>wget</code> \u4e5f\u5f88\u806a\u660e\u5730\u4e0b\u8f7d\u6bcf\u884c\u7684 URL\uff0c\u5f88\u795e\u5947\u5427 :)\u3002</p> <p>\u5982\u679c\u6700\u65b0\u53d1\u5e03\u4e2d\u6ca1\u6709 asset\uff0c\u5219\u4f1a\u76f4\u63a5\u4e0b\u8f7d\u6e90\u4ee3\u7801\u3002</p> <p>\u5982\u679c\u4f60\u53ea\u60f3\u4e0b\u8f7d\u6e90\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>--source</code>\uff0c\u4f8b\u5982\uff1a <pre><code>wget $(lastversion --source mautic/mautic)  \n</code></pre></p>"},{"location":"README-ZH-CN/#_4","title":"\u7528\u4f8b: \u83b7\u53d6\u6700\u65b0\u7248\u672c\uff08\u542b\u6d4b\u8bd5\u7248\uff09","text":"<p><code>lastversion</code> \u8ba4\u4e3a\u6700\u65b0\u7248\u672c\u662f\u7a33\u5b9a\u7248\u672c\u6216\u8005\u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u6d4b\u8bd5\u7684\u7248\u672c\u3002 \u5982\u679c\u4f60\u4e0d\u8fd9\u4e48\u8ba4\u4e3a\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>--pre</code> \u5c06\u9884\u53d1\u5e03\u7248\u672c\u4f5c\u4e3a\u6700\u65b0\u7248\u3002</p> <pre><code>lastversion --pre mautic/mautic \n#&gt; 2.15.2b0\n</code></pre>"},{"location":"README-ZH-CN/#_5","title":"\u7528\u4f8b: \u83b7\u53d6\u7279\u5b9a\u7684\u5206\u652f/\u7248\u672c","text":"<p>\u4e00\u4e9b\u9879\u76ee\u53ef\u80fd\u4f1a\u4e00\u8d77\u5728\u4e0d\u540c\u7684\u5206\u652f\u4e0a\u53d1\u5e03\u7a33\u5b9a\u7248\u672c\uff0c \u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f PHP\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>--major</code> \u53bb\u6307\u5b9a\u67d0\u4e2a\u4e3b\u7248\u672c\uff0c\u4f8b\u5982\uff1a</p> <pre><code>lastversion php/php-src --major 7.2\n</code></pre> <p>\u8fd9\u884c\u547d\u4ee4\u4f1a\u8f93\u51fa\u5f53\u524d\u7684 PHP \u7a33\u5b9a\u7684\u7248\u672c\uff0c\u5176\u7248\u672c\u683c\u5f0f\u4e3a <code>7.2.x</code>\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8fd9\u79cd\u7b80\u5355\u7684\u5199\u6cd5\u6765\u8fbe\u5230\u51e0\u4e4e\u76f8\u540c\u7684\u6548\u679c\uff0c\u5373\u5728\u5192\u53f7\u540e\u6307\u5b9a\u4e3b\u7248\u672c\u3002</p> <pre><code>lastversion php:7.2\n</code></pre> <p>\u4f60\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u7248\u672c\uff0c\u4f8b\u5982\uff1a</p> <pre><code>lastversion php:7.2.33 --assets\n</code></pre>"},{"location":"README-ZH-CN/#assets","title":"\u7528\u4f8b\uff1a\u68c0\u67e5\u662f\u5426\u53d1\u5e03 assets","text":"<p>\u6709\u65f6\u5019\u4e00\u4e2a\u9879\u76ee\u53ef\u80fd\u5df2\u7ecf\u53d1\u5e03\u4e86\u65b0\u7684\u7248\u672c\uff0c\u4f46\u662f\u76f8\u5173\u7684 assets \u5e76\u6ca1\u6709\u7b2c\u4e00\u65f6\u95f4\u53d1\u5e03\uff0c\u6bd4\u5982\u5404\u5927\u5e73\u53f0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002</p> <p>\u5982\u679c\u4f60\u53ea\u60f3\u8981\u67d0\u4e9b assets\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>--having-asset</code> \u6765\u5b9e\u73b0\u3002</p> <pre><code>lastversion telegramdesktop/tdesktop --having-asset \"Linux 64 bit: Binary\"\n</code></pre> <p><code>--having-asset</code> \u63a5\u6536\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u5339\u914d assets \u7684\u540d\u79f0\u3002</p> <p>\u83b7\u53d6\u5305\u542b macOS \u5e73\u53f0\u7684\u5b89\u88c5\u7a0b\u5e8f\u7684\u6700\u65b0\u7248\u672c\u53f7\u3002</p> <pre><code>lastversion telegramdesktop/tdesktop --having-asset \"~\\.dmg$\"\n</code></pre> <p>\u5982\u679c\u4f60\u4e0d\u4e3a <code>--having-asset</code> \u6307\u5b9a\u4efb\u4f55\u503c\uff0c\u90a3\u4e48\u5c06\u5339\u914d\u6240\u6709 assets\uff0c\u53ca\u53ea\u8981\u5305\u542b\u4efb\u610f\u7684 assets \u5747\u53ef\u3002</p> <pre><code>lastversion telegramdesktop/tdesktop --having-asset\n</code></pre>"},{"location":"README-ZH-CN/#_6","title":"\u7528\u4f8b\uff1a\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u7684\u7248\u672c\u53f7","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u901a\u5e38\u4e0d\u4f1a\u5728 Github \u53d1\u5e03\u7248\u672c\uff0c\u4f60\u901a\u5e38\u53ea\u80fd\u901a\u8fc7\u5b98\u65b9\u7f51\u7ad9\u7b49\u6e20\u9053\u624d\u80fd\u83b7\u53d6\uff0c \u4e0d\u8fc7 <code>lastversion</code> \u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002</p> <p><code>lastversion</code> \u7684\u505a\u6cd5\u7b80\u5355\u7c97\u66b4\uff0c\u5c06\u5e38\u89c1\u7684\u64cd\u4f5c\u7cfb\u7edf\u540d\u79f0\u53ca\u5176\u5bf9\u5e94\u7684 Wikipedia \u8054\u7cfb\u8d77\u6765\u5e76\u786c\u7f16\u7801\u5230\u7a0b\u5e8f\u4e2d\u3002</p> <pre><code>lastversion rocky #&gt; 8.4\nlastversion windows #&gt; 10.0.19043.1081\nlastversion ios #&gt; 14.6\n</code></pre> <p>\u4f60\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u67d0\u4e2a\u8f6f\u4ef6/\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b8c\u6574\u7684 Wikipedia \u7684 URL \u6765\u5b8c\u6210\u76f8\u540c\u7684\u64cd\u4f5c\u3002</p> <pre><code>lastversion https://en.wikipedia.org/wiki/Rocky_Linux #&gt; 8.4\n</code></pre>"},{"location":"README-ZH-CN/#nginx-stablemainline","title":"\u7279\u6b8a\u7528\u4f8b: NGINX \u7684\u7a33\u5b9a\u7248\uff08Stable\uff09\u548c\u4e3b\u7ebf\u7248\uff08Mainline\uff09","text":"<pre><code>lastversion https://nginx.org --major stable #&gt; 1.16.1\nlastversion https://nginx.org --major mainline #&gt; 1.17.9\n</code></pre> <p>\u4e0a\u9762\u8fd9\u884c\u547d\u4ee4\u5176\u5b9e\u662f\u68c0\u67e5 <code>hg.nginx.org</code>\uff0c\u5b83\u662f\u4e00\u4e2a Mercurial \u7f51\u7edc\u4ed3\u5e93\u3002</p> <p>\u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a</p> <pre><code>lastversion https://hg.example.com/project/\n</code></pre> <p>Mercurial \u4ed3\u5e93\u73b0\u5728\u6bd4\u8f83\u5c11\u89c1\uff0c<code>lastversion</code> \u652f\u6301\u5b83\u4e3b\u8981\u662f\u4e3a\u4e86 NGINX\u3002</p>"},{"location":"README-ZH-CN/#pypi","title":"\u7279\u6b8a\u7528\u4f8b: \u83b7\u53d6 PyPI \u9879\u76ee","text":"<p>\u5927\u591a\u6570 Python \u7684\u5e93\u548c\u5e94\u7528\u7a0b\u5e8f\u90fd\u6258\u7ba1\u5728 PyPI \u4e0a\u3002\u8981\u83b7\u53d6 PyPI \u4e0a\u9879\u76ee\u7684\u7248\u672c\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u3002</p> <pre><code>lastversion https://pypi.org/project/requests/\n</code></pre> <p>\u5982\u679c\u60a8\u4e0d\u60f3\u5199\u592a\u957f\u7684\u53c2\u6570\uff0c\u53ea\u60f3\u5199\u4ed3\u5e93\u540d\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528<code>--at pip</code>\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002</p> <pre><code>lastversion requests --at pip\n</code></pre>"},{"location":"README-ZH-CN/#rpm","title":"\u5b89\u88c5 RPM \u8d44\u6e90","text":"<p>\u5982\u679c\u4e00\u4e2a\u9879\u76ee\u63d0\u4f9b <code>.rpm</code> \u8d44\u6e90\u4e14\u4f60\u7684 OS \u53ef\u4ee5\u4f7f\u7528 <code>yum</code> \u6216 <code>dnf</code>\uff0c \u4f60\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5\u8be5\u9879\u76ee\u7684 RPM\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>sudo lastversion install mailspring\n</code></pre> <p>\u4e0a\u9762\u8fd9\u884c\u547d\u4ee4\u4ece MailSpring  \u7684\u6700\u65b0\u7248\u672c\u4e2d\u627e\u5230 <code>.rpm</code> \u5e76\u4f20\u9012\u7ed9 <code>yum</code> \u6216 <code>dnf</code>\u3002</p> <p>\u4f60\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7 cron \u5b9e\u73b0\u81ea\u52a8\u66f4\u65b0\uff0c\u8fd9\u5c06\u786e\u4fdd\u4f60\u5728\u67d0\u4e2a\u5305\u4e3a\u6700\u65b0\u7248\u672c\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>@daily /usr/bin/lastversion install mailspring -y 2&gt;/dev/null\n</code></pre> <p>\u5982\u679c MailSpring \u7684 Github \u4ed3\u5e93\u53d1\u5e03\u4e86\u4e00\u4e2a\u66f4\u65b0\u7684 <code>.rpm</code>\uff0c \u90a3\u4e48\u8fd9\u4e2a <code>.rpm</code> \u4f1a\u88ab\u81ea\u52a8\u5b89\u88c5\uff0c\u4ee5\u786e\u4fdd\u4f60\u7684\u7248\u672c\u7684\u6700\u65b0\u7684\u3002</p> <p>\u4f60\u751a\u81f3\u53ef\u4ee5\u5728\u66f4\u65b0\u5b8c\u6bd5\u540e\u6536\u5230\u90ae\u4ef6\u63d0\u9192\uff08cron \u7684\u6807\u51c6\u529f\u80fd\uff09\u3002</p> <p>\u4e0d\u7528\u8bf4\u90fd\u77e5\u9053\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5bfc\u81f4\u6211\u4eec\u4e0d\u77e5\u9053\u6f5c\u5728\u7684\u7f3a\u5931\u7684\u4f9d\u8d56\u3002 \u6240\u4ee5\uff0c\u53ea\u6709\u5f53 <code>yum</code> \u5e93\u6ca1\u6709\u4f60\u6240\u9700\u8981\u7684\u4e1c\u897f\u7684\u65f6\u5019\u624d\u4f7f\u7528 <code>lastversion install ...</code>\u3002</p>"},{"location":"README-ZH-CN/#_7","title":"\u6d4b\u8bd5\u300c\u7248\u672c\u89e3\u6790\u5668\u300d","text":"<p><code>test</code> \u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u6392\u9664\u6545\u969c\u6216\u8005\u7b80\u5355\u5730\u683c\u5f0f\u5316\u4e00\u4e2a\u7248\u672c\u6807\u7b7e\u3002</p> <pre><code>lastversion test 'blah-1.2.3-devel' # &gt; 1.2.3.dev0\nlastversion test '1.2.x' # &gt; False (no clear version)\nlastversion test '1.2.3-rc1' # &gt; 1.2.3rc1\n</code></pre>"},{"location":"README-ZH-CN/#bash-lastversion","title":"\u5728 <code>bash</code> \u4e0a\u7528 <code>lastversion</code> \u7f16\u5199\u811a\u672c","text":""},{"location":"README-ZH-CN/#_8","title":"\u7248\u672c\u53f7\u6bd4\u8f83","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>lastversion</code> \u8f7b\u677e\u5730\u6bd4\u8f83\u4e24\u4e2a\u7248\u672c\u53f7\u5e76\u8f93\u51fa\u66f4\u52a0\u65b0\u7684\u90a3\u4e2a\u3002</p> <pre><code>lastversion 1.2.3 -gt 1.2.4\n#&gt; 1.2.4\n</code></pre>"},{"location":"README-ZH-CN/#_9","title":"\u68c0\u67e5\u66f4\u65b0","text":"<p>\u5f53\u4f60\u60f3\u8981\u6784\u5efa\u67d0\u4e2a\u4e0a\u6e38\u7684\u5305\u7684\u65f6\u5019\uff0c\u800c\u4e14\u6b64\u65f6\u4f60\u4e5f\u6709\u8fd9\u4e2a\u5305\u4e0a\u6b21\u6784\u5efa\u65f6\u7684\u7248\u672c\u53f7\uff0c\u90a3\u4e48\u81ea\u52a8\u6784\u5efa\u5c06\u4f1a\u5341\u5206\u5bb9\u6613\u3002</p> <pre><code>CURRENTLY_BUILT_VER=1.2.3 # \u5b58\u50a8\u5728\u5176\u5b83\u4f4d\u7f6e\u6bd4\u5982\u6587\u4ef6\u4e2d\nLASTVER=$(lastversion repo/owner -gt ${CURRENTLY_BUILT_VER})\nif [[ $? -eq 0 ]]; then\n  # \u68c0\u6d4b\u5230\u6700\u65b0\u7248\u672c\uff0c\u89e6\u53d1\u6784\u5efa\u6d41\u7a0b\u3002\n  # ....\nfi\n</code></pre> <p>\u6ce8\u610f\uff0c<code>-gt</code> \u53c2\u6570\u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e <code>bash</code> \u4e2d\u7684 <code>-gt</code> \u6bd4\u8f83\u3002</p> <p>\u8fd8\u6709\u66f4\u591a\u5185\u5bb9\uff0c\u5982\u679c\u4f60\u60f3\u8ba9\u8fd9\u53d8\u5f97\u66f4\u9760\u8c31\u7684\u8bdd\uff0c \u8bf7\u542c\u6211\u5520\u53e8\uff1a RPM auto-builds with <code>lastversion</code></p>"},{"location":"README-ZH-CN/#linux","title":"\u68c0\u67e5\u4f60\u7684 Linux \u662f\u5426\u6709\u66f4\u65b0\u7684\u5185\u6838\u7248\u672c","text":"<pre><code>LATEST_KERNEL=$(lastversion linux -gt $(uname -r | cut -d '-' -f 1))\nif [[ $? -eq 0 ]]; then\n  echo \"I better update my kernel now, because ${LATEST_KERNEL} is there\"\nelse \n  echo \"My kernel is latest and greatest.\"\nfi \n</code></pre>"},{"location":"README-ZH-CN/#_10","title":"\u9000\u51fa\u72b6\u6001\u7801","text":"<p>\u9000\u51fa\u72b6\u6001\u7801\u662f\u4f20\u9012\u547d\u4ee4\u6267\u884c\u6210\u529f\u4e0e\u5426\u7684\u5e38\u7528\u624b\u6bb5\u3002\u5bf9\u4e8e<code>lastversion</code> \u6765\u8bf4\uff0c \u5982\u679c\u547d\u4ee4\u6267\u884c\u6210\u529f\u5219\u8fd4\u56de <code>0</code>\uff0c\u5176\u5b83\u8fd4\u56de\u503c\u7684\u542b\u4e49\uff1a</p> <p>\u8fd4\u56de\u503c <code>1</code> \u4ee3\u8868\u4ed3\u5e93\u4e0d\u5b58\u5728\u6216\u8005\u6ca1\u6709\u53d1\u5e03\u8fc7\u7248\u672c\u3002</p> <p>\u8fd4\u56de\u503c <code>2</code> \u4ee3\u8868\u6ca1\u6709\u6bd4 <code>-gt</code> \u6240\u6307\u5b9a\u7684\u7248\u672c\u66f4\u65b0\u7684\u7248\u672c\u3002</p> <p>\u8fd4\u56de\u503c <code>3</code> \u4ee3\u8868 <code>--filter</code> \u8fc7\u6ee4\u6389\u4e86\u6240\u6709\u7684 URL\uff0c\u5373\u6b63\u5219\u8868\u8fbe\u5f0f\u6ca1\u6709\u5339\u914d\u5230\u4efb\u4f55 URL\u3002</p>"},{"location":"README-ZH-CN/#_11","title":"\u5c0f\u8d34\u58eb","text":"<p>\u901a\u8fc7 API \u6765\u83b7\u53d6\u6700\u65b0\u7248\u672c\u5f88\u96be\uff0c\u56e0\u4e3a Github API \u4e0d\u5141\u8bb8\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u83b7\u53d6 tag\uff0c \u800c\u4e14\u4e00\u4e9b\u4ed3\u5e93\u4f1a\u66f4\u6362\u5b83\u7684\u7248\u672c\u53f7\u683c\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u8ba4\u4e3a\u6700\u9ad8\u7248\u672c\u53f7\u4ee3\u8868\u7740\u6700\u65b0\u7248\u672c\u3002</p> <p>\u6211\u4eec\u5fc5\u987b\u83b7\u53d6\u6bcf\u4e2a\u6807\u7b7e\u7684\u63d0\u4ea4\u65e5\u671f\uff0c\u5e76\u68c0\u67e5\u5b83\u662f\u5426\u771f\u7684\u662f\u6700\u8fd1\u63d0\u4ea4\u7684\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u5927\u578b\u4ed3\u5e93\u6765\u8bf4\u901f\u5ea6\u4f1a\u6bd4\u8f83\u6162\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4ed3\u5e93\u53ef\u80fd\u6709\u5f88\u591a\u6807\u7b7e\u3002</p> <p>\u56e0\u6b64\uff0c<code>lastversion</code> \u4f1a\u7f13\u5b58\u7684 API \u54cd\u5e94\u5185\u5bb9\u4ee5\u63d0\u9ad8\u54cd\u5e94\u901f\u5ea6\uff0c \u5b83\u505a\u4e86\u6709\u6761\u4ef6\u7684 ETag \u9a8c\u8bc1\uff0c\u6839\u636e GitHub API \u7684\u89c4\u5b9a\uff0cETag \u9a8c\u8bc1\u4e0d\u8ba1\u5165\u901f\u7387\u9650\u5236\u3002 \u5728 Linux \u4e0b\u7f13\u5b58\u5185\u5bb9\u5b58\u50a8\u5728 <code>~/.cache/lastversion</code>\u3002</p> <p>\u5efa\u8bae\u8bbe\u7f6e\u4f60\u7684 GitHub API token\u3002 \u4ec5\u4ec5\u53ea\u9700\u8981 API token\uff0c\u4f60\u53ef\u4ee5\u53d6\u6d88\u8fd9\u4e2a Token \u7684\u6240\u6709\u6743\u9650\uff0c \u7136\u540e\u4f60\u53ef\u4ee5\u5728 <code>~/.bashrc</code> \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e0b\u5217\u5185\u5bb9\u6765\u63d0\u5347\u4f60\u7684\u8bf7\u6c42\u901f\u5ea6\u4e0a\u9650\u3002</p> <pre><code>export GITHUB_API_TOKEN=xxxxxxxxxxxxxxx\n</code></pre> <p><code>GITHUB_API_TOKEN</code> \u548c <code>GITHUB_TOKEN</code> \u8fd9\u4e24\u4e2a\u73af\u5883\u53d8\u91cf\u5747\u53ef\u88ab\u8bc6\u522b\uff0c \u4e14\u5f53\u4e24\u8005\u540c\u65f6\u5b58\u5728\u65f6\u4f18\u5148\u4f7f\u7528\u524d\u8005\u3002</p> <p>\u5bf9\u4e8e GitLab, \u4f60\u53ef\u4ee5\u4f7f\u7528  Personal Access Token:</p> <pre><code>export GITLAB_PA_TOKEN=xxxxxxxxxxxxxxx\n</code></pre> <p>\u7136\u540e\u8fd0\u884c <code>source ~/.bashrc</code>\uff0c\u4e4b\u540e\uff0c<code>lastversion</code> \u5c06\u4f1a\u4f7f\u7528 TOKEN \u6765\u66f4\u5feb\u5730\u8c03\u7528 API\u3002</p>"},{"location":"README-ZH-CN/#python","title":"\u5728 Python \u6a21\u5757\u4e2d\u7684\u7528\u6cd5","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>lastversion.has_update(...)</code> \u6765\u67e5\u627e\u67d0\u4e2a\u9879\u76ee\u662f\u5426\u5df2\u7ecf\u6709\u66f4\u65b0\u3002</p> <pre><code>from lastversion import lastversion\nlatest_version = lastversion.has_update(repo=\"mautic/mautic\", current_version='1.2.3')\nif latest_version:\n    print(f'Newer Mautic version is available: {latest_version}')\nelse:\n    print('No update is available')\n</code></pre> <p><code>lastversion.has_update(...)</code> \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4ed3\u5e93\u7684 URL\uff0c\u6216\u8005\u5f62\u5982 <code>\u7528\u6237\u540d/\u4ed3\u5e93\u540d</code> \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5f53\u524d\u7248\u672c\u3002</p> <p>\u5982\u679c\u4f60\u8981\u68c0\u67e5 PyPI \u4e0a\u7684\u9879\u76ee\u7248\u672c\uff0c\u8bf7\u4f7f\u7528\u53c2\u6570 <code>at='pip'</code>\uff0c \u8fd9\u6837\u5c31\u4e0d\u7528\u4f20\u9012\u4e00\u4e2a\u5b8c\u6574\u7684 PyPI \u9879\u76ee\u7684 URL \u4e86\uff0c\u5e76\u4e14\u907f\u514d\u9519\u8bef\u5730\u4ece\u5176\u5b83\u5e73\u53f0\u5982 Github \u4e0a\u83b7\u53d6\u4fe1\u606f\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u68c0\u67e5 <code>Requests</code> \u6700\u65b0\u7684\u7248\u672c\u3002</p> <pre><code>from lastversion import lastversion\nlatest_version = lastversion.has_update(repo=\"requests\", at='pip', current_version='1.2.3')\nif latest_version:\n    print(f'Newer Requests library is available: {latest_version}')\nelse:\n    print('No update is available')\n</code></pre> <p>\u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e0b\u9762\u7684\u4e00\u4e2a\u8fd4\u56de\u503c\uff1a</p> <ul> <li>Version \u5bf9\u8c61</li> <li><code>False</code> \u5982\u679c\u6ca1\u6709\u66f4\u52a0\u65b0\u7684\u7248\u672c</li> </ul> <p>\u4f60\u4e5f\u53ef\u4ee5\u8c03\u7528 <code>lastversion.latest(...)</code> \u51fd\u6570\u6765\u83b7\u53d6\u6700\u65b0\u7248\u672c\u7684\u4fe1\u606f\u3002</p> <pre><code>from lastversion import lastversion\nfrom packaging import version\n\nlatest_mautic_version = lastversion.latest(\"mautic/mautic\", output_format='version', pre_ok=True)\n\nprint(f'Latest Mautic version: {latest_mautic_version}')\n\nif latest_mautic_version &gt;= version.parse('1.8.1'):\n    print('It is newer')\n</code></pre> <p>\u5982\u679c <code>output_format='version'</code>\uff08\u9ed8\u8ba4\uff09\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a  Version \u5bf9\u8c61 \u6216\u8005 <code>none</code>\u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u8fdb\u884c\u5982\u7248\u672c\u6bd4\u8f83\u7b49\u5de5\u4f5c\u3002</p> <p>\u5982\u679c\u6307\u5b9a\u53c2\u6570 <code>output_format='dict'</code>\uff0c \u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a <code>dict</code>\uff08\u5b57\u5178\uff09\u6216 <code>False</code>\uff0c \u5982\u679c\u51fd\u6570\u4ece\u4e0d\u540c\u7684\u5e73\u53f0\uff08\u5982 Github \u548c BitBucket\uff09\u83b7\u53d6\u540c\u4e00\u4e2a\u9879\u76ee\u7684\u7248\u672c\u4fe1\u606f\uff0c \u90a3\u4e48\u5b57\u5178\u7684 <code>Key</code>\uff08\u952e\uff09\u53ef\u80fd\u4f1a\u4e0d\u540c\uff0c \u4f46\u53ef\u4ee5\u4fdd\u8bc1\u4e00\u5b9a\u4f1a\u6709\u4e0b\u5217\u7684 <code>Key</code>\uff08\u952e\uff09\u3002</p> <ul> <li><code>version</code>\uff1aVersion </li> </ul> <p>\u5bf9\u8c61\uff0c\u5305\u542b\u88ab\u627e\u5230\u7684\u7248\u672c\uff0c\u5982 <code>1.2.3</code>\u3002</p> <ul> <li><code>source</code>\uff1a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u6765\u6e90\u5e73\u53f0, \u5982 <code>github</code> \u6216  <code>gitlab</code>\u3002</li> <li><code>tag_date</code>\uff1a<code>datetime</code> \u5bf9\u8c61, \u8868\u793a\u53d1\u5e03\u7684\u65f6\u95f4\uff0c\u5982 <code>2020-12-15 14:41:39</code>\u3002</li> <li><code>from</code>\uff1a\u5b57\u7b26\u4e32, \u9879\u76ee\u7684\u5b8c\u6574 URL\u3002</li> <li><code>tag_name</code>\uff1a\u5b57\u7b26\u4e32\uff0c\u7248\u672c\u6807\u7b7e\u540d\u3002</li> </ul> <p><code>lastversion.latest</code> \u51fd\u6570\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570</p> <ul> <li><code>repo</code>\uff0c\u4ed3\u5e93\u7684 URL\uff0c\u6216\u8005\u5f62\u5982 <code>\u7528\u6237\u540d/\u4ed3\u5e93\u540d</code> \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 <code>https://github.com/dvershinin/lastversion/issues</code>\u3002</li> <li><code>format</code>\uff0c\u5b83\u63a5\u53d7\u7684\u503c\u540c <code>--help</code> \u6240\u8bf4\u660e\u7684\u4e00\u6837\u3002\u4e0d\u8fc7\u5728 <code>Python</code> \u4ee3\u7801\u4e2d\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e3a <code>dict</code>\u3002</li> <li><code>pre_ok</code>\uff0c\u5e03\u5c14\u503c\uff0c\u8868\u793a\u9884\u53d1\u5e03\u7248\u672c\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u6700\u65b0\u7248\u672c\u3002</li> <li><code>at</code>\uff0c\u8be5\u9879\u76ee\u6240\u5728\u7684\u5e73\u53f0\uff0c\u53d6\u503c\u4ec5\u53ef\u80fd\u4e3a<code>github</code>\uff0c<code>gitlab</code>\uff0c<code>bitbucket</code>\uff0c<code>pip</code>\uff0c<code>hg</code>\uff0c<code>sf</code>\uff0c<code>website-feed</code>\uff0c<code>local</code>\u3002</li> </ul> <p></p>"},{"location":"api/","title":"Web API","text":""},{"location":"api/#lastversion-public-api","title":"<code>lastversion</code> public API","text":"<p>You don't need to use <code>lastversion</code> as a command line tool or install it as a  package to use it. </p> <p>You can consume <code>lastversion</code> functionality through two API offerings:</p> <ol> <li>Free Public API at <code>lastversion-api.getpagespeed.com</code> </li> <li>Production-Ready Commercial API on RapidAPI</li> </ol>"},{"location":"api/#1-public-api-limited-best-for-small-usage","title":"1. Public API (Limited, Best for Small Usage)","text":"<p>Free API has Limited SLA and Rate Limits: It\u2019s free, so heavier usage or production traffic may see performance  or reliability constraints. For use in automated workflows, we highly recommend the commercial API below.</p> <p>For casual or small usage scenarios, you can directly query this free public endpoint: </p> <pre><code>https://lastversion-api.getpagespeed.com/&lt;github-repo&gt;\n</code></pre> <p>Make a GET request to the endpoint to get the latest version of the repository in JSON format.</p> <p>To get only the version number, append <code>?version</code> to the URL.</p> <p>Examples:</p> <ul> <li>https://lastversion-api.getpagespeed.com/dvershinin/lastversion</li> <li>https://lastversion-api.getpagespeed.com/dvershinin/lastversion?version</li> </ul> <p>Note that API caches results for 2 hours.</p> <p>For faster updates of your own project, please set up a webhook for your  GitHub repo that points to:</p> <pre><code>https://lastversion-api.getpagespeed.com/hooks/github\n</code></pre>"},{"location":"api/#badges-with-the-latest-version","title":"Badges with the latest version","text":"<p>You can use the following badges in your project's <code>README.md</code> to show the latest version of your project:</p> <pre><code>![Dynamic JSON Badge](https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Flastversion-api.getpagespeed.com%2Fdvershinin%2Flastversion&amp;query=version&amp;label=Release)\n</code></pre> <p>Just replace <code>dvershinin</code> and <code>lastversion</code> with your GitHub username and repository name.</p> <p>The result will look like this:</p> <p></p> <p>Alternatively, head to Shields.io dynamic page configurator:</p> <ul> <li>Set URL to <code>https://lastversion-api.getpagespeed.com/&lt;your-github-user&gt;/&lt;your-github-repo&gt;</code></li> <li>Set query to <code>version</code></li> <li>Set label to <code>Release</code> or whatever you want, and set other settings as desired.</li> </ul> <p>Click <code>Execute</code> to verify results and copy Markdown or desired format.</p>"},{"location":"api/#2-production-ready-commercial-api-on-rapidapi","title":"2. Production-Ready Commercial API on RapidAPI","text":"<p>Subscribe to the commercial API on RapidAPI for higher rate limits, guaranteed performance, or advanced features:  lastversion API on RapidAPI</p> <p>Users of the lastversion API on RapidAPI benefit from:</p> <ul> <li>Higher rate limits and guaranteed performance</li> <li>Flexible Endpoints: Fetch just the <code>version</code>, list of <code>assets</code>, or full release details via different routes.</li> <li>Scalable Billing Plans: Start free, upgrade as your usage grows.</li> <li>Stability for Production: guaranteed uptime and no 2-hour forced cache if you need fresh data.</li> </ul> <p>Secure your requests with API Keys provided by RapidAPI.</p> <ul> <li>Header Name: <code>X-RapidAPI-Key</code></li> <li>Required: Yes</li> </ul> <p>\ud83d\udccc Endpoints</p> <ul> <li><code>/version?project=project_id</code> returns JSON with the version string, corresponding to the latest release</li> <li><code>/source?project=project_id</code> returns JSON with URL to download source tarball corresponding to the latest release</li> <li><code>/assets?project=project_id</code> returns JSON URLs corresponding to downloadable executable or other assets for the latest release</li> <li><code>/release?project=project_id</code> returns JSON with various information about the latest release with mandatory <code>version</code> field</li> </ul> <p>The <code>project_id</code> can be a single identifier like <code>linux</code> or <code>nginx</code> or a GitHub repository name, or you can even supply a URL where a project is hosted.</p> <p>\ud83d\udccc Text Endpoints</p> <ul> <li><code>/text/version?project=project_id</code> returns only text with the version string, corresponding to the latest release.</li> <li><code>/text/source?project=project_id</code> returns only text with the URL to download source tarball corresponding to the latest release</li> <li><code>/text/assets?project=project_id</code> returns only text with URLs corresponding to downloadable executable or other assets for the latest release</li> </ul> <p>Example Requests:</p> <p>Fetch NGINX Latest Version (GET):</p> <pre><code>curl -X GET \"https://lastversion.p.rapidapi.com/release?project=nginx\" \\\n     -H \"X-RapidAPI-Key: YOUR_RAPIDAPI_KEY\" \\\n     -H \"X-RapidAPI-Host: lastversion.p.rapidapi.com\"\n</code></pre> <p>Response:</p> <pre><code>{\n  \"version\": \"1.27.3\",\n  \"type\": \"release\",\n  ...\n}\n</code></pre> <p>If you want to get just the version, use the <code>/text/version</code> endpoint URL.</p> <p>Fetch Linux Latest Version (GET) with Version Only:</p> <pre><code>curl -X GET \"https://lastversion.p.rapidapi.com/text/version?project=torvalds/linux\" \\\n     -H \"X-RapidAPI-Key: YOUR_RAPIDAPI_KEY\" \\\n     -H \"X-RapidAPI-Host: lastversion.p.rapidapi.com\"\n</code></pre> <p>Response: <code>6.12</code></p> <p>Every endpoint supports <code>major</code> parameter, allowing you to answer questions like:</p> <p>&gt; What was the last 4.x Linux version?</p> <pre><code>curl -X GET \"https://lastversion.p.rapidapi.com/text/version?project=torvalds/linux&amp;major=4\" \\\n     -H \"X-RapidAPI-Key: YOUR_RAPIDAPI_KEY\" \\\n     -H \"X-RapidAPI-Host: lastversion.p.rapidapi.com\"\n</code></pre> <p>Response: <code>4.20</code></p> <p>Fetch the latest release data of WordPress:</p> <pre><code>curl -X GET \"https://lastversion.p.rapidapi.com/release?project=WordPress/WordPress\" \\\n     -H \"X-RapidAPI-Key: YOUR_RAPIDAPI_KEY\" \\\n     -H \"X-RapidAPI-Host: lastversion.p.rapidapi.com\"\n</code></pre> <p>Response will include <code>version:</code> field as well as a lot of other useful information about the latest release.</p> <p>Fetch download URL of the latest WordPress:</p> <pre><code>curl -X GET \"https://lastversion.p.rapidapi.com/source?project=WordPress/WordPress\" \\\n     -H \"X-RapidAPI-Key: YOUR_RAPIDAPI_KEY\" \\\n     -H \"X-RapidAPI-Host: lastversion.p.rapidapi.com\"\n</code></pre> <p>Response: <code>https://github.com/WordPress/WordPress/archive/6.7.1/WordPress-6.7.1.tar.gz</code></p> <p>The creative and useful application of this API is in fact unlimited, when you pair it with external tools like <code>curl</code> or <code>wget</code>.</p> <p>For example, download the latest WordPress release:</p> <pre><code>wget $(curl -X GET \"https://lastversion.p.rapidapi.com/text/source?project=WordPress/WordPress\" -H \"X-RapidAPI-Key: YOUR_RAPIDAPI_KEY\" -H \"X-RapidAPI-Host: lastversion.p.rapidapi.com\")\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#357-2024-11-07","title":"[3.5.7] - 2024-11-07","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Raised files download timeout to 30 seconds</li> </ul>"},{"location":"changelog/#356-2024-09-08","title":"[3.5.6] - 2024-09-08","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Known NGINX repo has been moved to GitHub</li> </ul>"},{"location":"changelog/#355-2024-08-27","title":"[3.5.5] - 2024-08-27","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed some GitHub API nuances and incorrect versions returned #168</li> </ul>"},{"location":"changelog/#354-2024-07-27","title":"[3.5.4] - 2024-07-27","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Introduced timeout of 30 seconds for HTTP requests to avoid hanging on slow connections</li> </ul>"},{"location":"changelog/#353-2024-07-12","title":"[3.5.3] - 2024-07-12","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Added a special case of normalizing service pack versions, e.g. <code>15 SP6</code> to <code>15.post6</code></li> </ul>"},{"location":"changelog/#352-2024-03-17","title":"[3.5.2] - 2024-03-17","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Additional beta detection for GitHub projects</li> </ul>"},{"location":"changelog/#351-2024-03-10","title":"[3.5.1] - 2024-03-10","text":""},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Fixed source tarball link for releases which have slash in tag names</li> <li>Improved detection of pre-releases</li> </ul>"},{"location":"changelog/#350-2024-01-29","title":"[3.5.0] - 2024-01-29","text":""},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Improved and added zip support in extract command by @lxl66566</li> <li>The <code>-gt</code> CLI did not recognize first argument as repo in some cases</li> </ul>"},{"location":"changelog/#346-2023-12-26","title":"[3.4.6] - 2023-12-26","text":""},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Looking at more tags in GitLab API to fix #135</li> </ul>"},{"location":"changelog/#345-2023-12-16","title":"[3.4.5] - 2023-12-16","text":""},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Some authors tag with build numbers, e.g. <code>1.2.3-1</code>, which incorrectly was in the version #134</li> </ul>"},{"location":"changelog/#344-2023-12-16","title":"[3.4.4] - 2023-12-16","text":""},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>No release could be found for GitLab projects in subgroups #132</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>For GitLab, structured output now includes <code>/LICENSE</code> file contents, when available</li> </ul>"},{"location":"changelog/#343-2023-12-11","title":"[3.4.3] - 2023-12-11","text":""},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Added <code>--formal</code> switch to allow for formal releases only</li> </ul>"},{"location":"changelog/#342-2023-12-10","title":"[3.4.2] - 2023-12-10","text":""},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li><code>--format source</code> did not include valid links</li> </ul>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li><code>source_url</code> is now included in <code>--format json</code> output</li> <li>Web API! Hooray! </li> </ul>"},{"location":"changelog/#341-2023-12-07","title":"[3.4.1] - 2023-12-07","text":""},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>GitLab <code>--format json</code> failed when no assets were present</li> </ul>"},{"location":"changelog/#340-2023-12-02","title":"[3.4.0] - 2023-12-02","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li><code>lastversion_only</code> global is respected in <code>.spec</code> files</li> <li><code>lastversion_having_asset</code> global is respected in <code>.spec</code> files</li> </ul>"},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Reworked search across different project locations to be more consistent</li> </ul>"},{"location":"changelog/#332-2023-09-25","title":"[3.3.2] - 2023-09-25","text":""},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>Fix regression in semver preference</li> </ul>"},{"location":"changelog/#331-2023-09-22","title":"[3.3.1] - 2023-09-22","text":""},{"location":"changelog/#fixed_16","title":"Fixed","text":"<ul> <li>Fixed AppImage installation #107</li> </ul>"},{"location":"changelog/#330-2023-09-19","title":"[3.3.0] - 2023-09-19","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Ability to fetch <code>--source</code> URLs for SourceForge projects</li> </ul>"},{"location":"changelog/#312-2023-09-16","title":"[3.1.2] - 2023-09-16","text":""},{"location":"changelog/#fixed_17","title":"Fixed","text":"<ul> <li>Fixed AppImage installation #107</li> </ul>"},{"location":"changelog/#312-2023-09-16_1","title":"[3.1.2] - 2023-09-16","text":""},{"location":"changelog/#fixed_18","title":"Fixed","text":"<ul> <li>Fixed AppImage installation #107</li> </ul>"},{"location":"changelog/#311-2023-09-16","title":"[3.1.1] - 2023-09-16","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Some code refactoring and better identifying of pre-releases</li> </ul>"},{"location":"changelog/#311-2023-09-14","title":"[3.1.1] - 2023-09-14","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>GitHub: when a semver version is detected, it is now used as a constraint #109</li> </ul>"},{"location":"changelog/#301-2023-07-15","title":"[3.0.1] - 2023-07-15","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Relaxed CacheControl dependency versions constraints</li> <li>Fixed \"1.2.3-alpha\" unnumbered pre-release detection</li> </ul>"},{"location":"changelog/#300-2023-06-22","title":"[3.0.0] - 2023-06-22","text":""},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Python 2 is no longer supported</li> </ul>"},{"location":"changelog/#fixed_19","title":"Fixed","text":"<ul> <li>Wrong version parsing with number in name #102</li> <li>90+ versions that look like dates triggered pre-release detection</li> </ul>"},{"location":"changelog/#2415-2023-05-08","title":"[2.4.15] - 2023-05-08","text":""},{"location":"changelog/#fixed_20","title":"Fixed","text":"<ul> <li>Pinned some dependency versions to avoid breakage</li> <li>Removed unnecessary warnings</li> </ul>"},{"location":"changelog/#2414-2023-04-24","title":"[2.4.14] - 2023-04-24","text":""},{"location":"changelog/#fixed_21","title":"Fixed","text":"<ul> <li>Fix URL encoded tag names #99</li> </ul>"},{"location":"changelog/#2413-2023-03-28","title":"[2.4.13] - 2023-03-28","text":""},{"location":"changelog/#fixed_22","title":"Fixed","text":"<ul> <li>Downloading GitLab <code>--assets</code> is now possible</li> <li>Fixed <code>--exclude</code> option not working</li> <li>Fixes detecting of some pre-releases</li> </ul>"},{"location":"changelog/#2412-2023-03-11","title":"[2.4.12] - 2023-03-11","text":""},{"location":"changelog/#fixed_23","title":"Fixed","text":"<ul> <li>Fixes an issue where release feed contains identical tag versions #92</li> </ul>"},{"location":"changelog/#2411-2023-02-16","title":"[2.4.11] - 2023-02-16","text":""},{"location":"changelog/#fixed_24","title":"Fixed","text":"<ul> <li>Don't treat 0.0.90+ as pre-releases #90</li> </ul>"},{"location":"changelog/#2410-2023-01-24","title":"[2.4.10] - 2023-01-24","text":""},{"location":"changelog/#fixed_25","title":"Fixed","text":"<ul> <li>Fatal failure regression from release 2.4.9 on some packaging library versions</li> <li>More intelligent search in GitLab tags</li> </ul>"},{"location":"changelog/#249-2023-01-22","title":"[2.4.9] - 2023-01-22","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>New <code>--even</code> switch to target software that uses odd/even versioning where even is stable</li> </ul>"},{"location":"changelog/#fixed_26","title":"Fixed","text":"<ul> <li>Micro-releases 90+ are treated as non-stable versions (old Linux software)</li> </ul>"},{"location":"changelog/#248-2022-12-05","title":"[2.4.8] - 2022-12-05","text":""},{"location":"changelog/#fixed_27","title":"Fixed","text":"<ul> <li>Better detection of x86_64 arch for <code>install</code> command</li> </ul>"},{"location":"changelog/#247-2022-11-10","title":"[2.4.7] - 2022-11-10","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Added quictls/openssl repo shortcut</li> <li>Updated <code>Accept:</code> API header reflecting current state of GitHub docs</li> </ul>"},{"location":"changelog/#fixed_28","title":"Fixed","text":"<ul> <li>Use stars instead of best-match for GitHub repo search as it seems more consistent</li> <li>Minor optimization to GitHub repositories search</li> </ul>"},{"location":"changelog/#246-2022-10-26","title":"[2.4.6] - 2022-10-26","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>More licenses for matching to RPM license field #74</li> <li>Added quictls/openssl for special version handling</li> </ul>"},{"location":"changelog/#245-2022-05-22","title":"[2.4.5] - 2022-05-22","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Officially supporting Gitea repos #73</li> </ul>"},{"location":"changelog/#244-2022-05-08","title":"[2.4.4] - 2022-05-08","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Allow extracting version from an arbitrary string (CLI)</li> </ul>"},{"location":"changelog/#243-2022-04-29","title":"[2.4.3] - 2022-04-29","text":""},{"location":"changelog/#fixed_29","title":"Fixed","text":"<ul> <li>Allow using --at with any non-URL repository specifier</li> </ul>"},{"location":"changelog/#242-2022-04-10","title":"[2.4.2] - 2022-04-10","text":""},{"location":"changelog/#fixed_30","title":"Fixed","text":"<ul> <li>Detection of self-hosted GitLab via gitlab. subdomain</li> </ul>"},{"location":"changelog/#241-2022-04-10","title":"[2.4.1] - 2022-04-10","text":""},{"location":"changelog/#fixed_31","title":"Fixed","text":"<ul> <li>Fixed regression from previous release where <code>--tag</code> CLI failed</li> </ul>"},{"location":"changelog/#240-2022-04-09","title":"[2.4.0] - 2022-04-09","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Added better semantic versioning support via <code>--sem</code> option</li> </ul>"},{"location":"changelog/#230-2022-04-05","title":"[2.3.0] - 2022-04-05","text":""},{"location":"changelog/#fixed_32","title":"Fixed","text":"<ul> <li>Removed unnecessary API calls, performance improvement</li> </ul>"},{"location":"changelog/#222-2022-03-18","title":"[2.2.2] - 2022-03-18","text":""},{"location":"changelog/#fixed_33","title":"Fixed","text":"<ul> <li><code>rpmspec_license</code> failed output when no license</li> </ul>"},{"location":"changelog/#221-2022-02-27","title":"[2.2.1] - 2022-02-27","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li><code>--only</code> now accepts regex via <code>~</code> prefix and negation via <code>!</code> prefix</li> <li>new <code>--exclude</code> argument allows for negative filtering</li> <li><code>dict</code> or <code>json</code> output: added <code>rpmspec_license</code> field</li> </ul>"},{"location":"changelog/#220-2022-02-27","title":"[2.2.0] - 2022-02-27","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li><code>unzip</code> command to extract project directly to the current directory</li> </ul>"},{"location":"changelog/#210-2022-02-23","title":"[2.1.0] - 2022-02-23","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Several extra repo shortcuts: kodi for Kodi, sles for SUSE Enterprise </li> <li>Refactored code so that caching can be better used</li> <li>Extra detection of beta via preview and early-access delimiters</li> <li><code>--at wordpress</code> for WordPress plugins</li> </ul>"},{"location":"changelog/#201-2021-10-28","title":"[2.0.1] - 2021-10-28","text":""},{"location":"changelog/#fixed_34","title":"Fixed","text":"<ul> <li>GitHub has empty <code>releases.atom</code> in tag-only repos #63, #65</li> <li>Fix for some repos where <code>releases.atom</code> contains old releases only</li> </ul>"},{"location":"changelog/#200-2021-10-21","title":"[2.0.0] - 2021-10-21","text":""},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>The \"install\" action operates against releases with respective assets #60</li> </ul>"},{"location":"changelog/#fixed_35","title":"Fixed","text":"<ul> <li>The <code>releases.atom</code> w/o authorization, fixes behavior of GitHub returning empty feeds</li> </ul>"},{"location":"changelog/#160-2021-09-04","title":"[1.6.0] - 2021-09-04","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>For .spec file updates, look for URL: tag as well, to use as repo argument</li> <li><code>--at system</code> will query last version from package managers</li> <li>Various performance optimizations</li> </ul>"},{"location":"changelog/#151-2021-08-07","title":"[1.5.1] - 2021-08-07","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li><code>--having-asset</code> accepts regular expression if tilde prepended</li> <li>For one-word repo argument, check word/word official GitHub repo first, then search</li> </ul>"},{"location":"changelog/#150-2021-08-06","title":"[1.5.0] - 2021-08-06","text":""},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>New <code>--having-asset</code> switch to consider only formal releases with given asset name</li> </ul>"},{"location":"changelog/#fixed_36","title":"Fixed","text":"<ul> <li>Unnecessary parsing of repo argument as version (performance)</li> </ul>"},{"location":"changelog/#145-2021-07-16","title":"[1.4.5] - 2021-07-16","text":""},{"location":"changelog/#fixed_37","title":"Fixed","text":"<ul> <li>Fixed RPM builds rpmlint changelog-time-in-future by having changelog in UTC</li> </ul>"},{"location":"changelog/#144-2021-07-16","title":"[1.4.4] - 2021-07-16","text":""},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li>Print latest version from .spec file every time</li> </ul>"},{"location":"changelog/#143-2021-07-16","title":"[1.4.3] - 2021-07-16","text":""},{"location":"changelog/#fixed_38","title":"Fixed","text":"<ul> <li>Fixed installation on some systems</li> </ul>"},{"location":"changelog/#142-2021-07-15","title":"[1.4.2] - 2021-07-15","text":""},{"location":"changelog/#added_17","title":"Added","text":"<ul> <li>Experimental: updating .spec files for RPM auto-builds #26</li> </ul>"},{"location":"changelog/#141-2021-07-08","title":"[1.4.1] - 2021-07-08","text":""},{"location":"changelog/#fixed_39","title":"Fixed","text":"<ul> <li><code>--download</code> option works for asset downloads, as long as there is one asset</li> </ul>"},{"location":"changelog/#140-2021-06-27","title":"[1.4.0] - 2021-06-27","text":""},{"location":"changelog/#added_18","title":"Added","text":"<ul> <li>Now it's easy to get OS versions. Just run <code>lastversion ubuntu</code> or something</li> </ul>"},{"location":"changelog/#135-2021-06-09","title":"[1.3.5] - 2021-06-09","text":""},{"location":"changelog/#added_19","title":"Added","text":"<ul> <li>Ability to parse/check Helm chart repository metadata #50</li> </ul>"},{"location":"changelog/#fixed_40","title":"Fixed","text":"<ul> <li>Ensure the <code>--only</code> switch works consistently across different project hosting</li> </ul>"},{"location":"changelog/#134-2021-05-25","title":"[1.3.4] - 2021-05-25","text":""},{"location":"changelog/#added_20","title":"Added","text":"<ul> <li>Arbitrary versions comparison in CLI: <code>lastversion 1.2.3 -gt 1.2.4</code></li> <li><code>lastversion --version</code> reports available updates for <code>lastversion</code></li> <li>Clean up canceled download on Ctrl+C</li> </ul>"},{"location":"changelog/#133-2021-02-03","title":"[1.3.3] - 2021-02-03","text":""},{"location":"changelog/#added_21","title":"Added","text":"<ul> <li>More requests logging in <code>--verbose</code> mode</li> <li>Log failed feed parsing</li> <li>Raising <code>BadProjectError</code> from GraphQL find method if repo arg is invalid</li> </ul>"},{"location":"changelog/#fixed_41","title":"Fixed","text":"<ul> <li>Work around GitHub servers' inconsistency with feed redirects #44</li> <li>Using all tags in GraphQL find method, instead of annotated only #44</li> </ul>"},{"location":"changelog/#132-2021-01-12","title":"[1.3.2] - 2021-01-12","text":""},{"location":"changelog/#fixed_42","title":"Fixed","text":"<ul> <li>GraphQL method for finding release tags was not reliable on repos   with tags having no tagger field</li> <li>Strip all extraneous alphanumerics from beginning of tags to improve    detection</li> </ul>"},{"location":"changelog/#131-2021-01-17","title":"[1.3.1] - 2021-01-17","text":""},{"location":"changelog/#added_22","title":"Added","text":"<ul> <li><code>output_format='dict</code> for the <code>lastversion.latest()</code> function</li> <li>Honour <code>GITHUB_TOKEN</code> env var in addition to <code>GITHUB_API_TOKEN</code></li> </ul>"},{"location":"changelog/#130-2021-01-16","title":"[1.3.0] - 2021-01-16","text":""},{"location":"changelog/#added_23","title":"Added","text":"<ul> <li><code>--at</code> switch (and function argument) to explicitly specify project provider </li> <li>PyPI support</li> </ul>"},{"location":"changelog/#126-2021-01-13","title":"[1.2.6] - 2021-01-13","text":""},{"location":"changelog/#fixed_43","title":"Fixed","text":"<ul> <li>Ensure compatibility with older python packaging module found in CentOS 7</li> </ul>"},{"location":"changelog/#125-2021-01-12","title":"[1.2.5] - 2021-01-12","text":""},{"location":"changelog/#fixed_44","title":"Fixed","text":"<ul> <li>Version checks and output for odd non-semantic tags, e.g. 1.1.1i (OpenSSL)</li> </ul>"},{"location":"changelog/#124-2020-12-19","title":"[1.2.4] - 2020-12-19","text":""},{"location":"changelog/#fixed_45","title":"Fixed","text":"<ul> <li>Fixed waiting API quota reinstatement</li> <li>Cache info about non-existent GitHub repositories</li> </ul>"},{"location":"changelog/#123-2020-10-02","title":"[1.2.3] - 2020-10-02","text":""},{"location":"changelog/#fixed_46","title":"Fixed","text":"<ul> <li>Fixed <code>lastversion URL</code> introduced by regression from 1.2.1</li> </ul>"},{"location":"changelog/#122-2020-09-29","title":"[1.2.2] - 2020-09-29","text":""},{"location":"changelog/#fixed_47","title":"Fixed","text":"<ul> <li><code>--format json</code> and <code>--format assets</code> work for Non-GitHub projects </li> </ul>"},{"location":"changelog/#121-2020-09-29","title":"[1.2.1] - 2020-09-29","text":""},{"location":"changelog/#added_24","title":"Added","text":"<ul> <li><code>lastversion repo:branch</code> syntax, e.g. <code>lastversion php:7.2</code> or <code>lastversion nginx:mainline</code></li> </ul>"},{"location":"changelog/#fixed_48","title":"Fixed","text":"<ul> <li>require feedparser version that works with Python 2</li> </ul>"},{"location":"changelog/#120-2020-09-06","title":"[1.2.0] - 2020-09-06","text":""},{"location":"changelog/#added_25","title":"Added","text":"<ul> <li>New switch <code>--only</code> allows filtering projects in repos with multiple actual projects</li> <li>Ability to sniff version from a software website which publishes releases in RSS/ATOM feeds #23</li> <li>Ability to sniff version by discovering GitHub repository links on a software website #23</li> </ul>"},{"location":"changelog/#fixed_49","title":"Fixed","text":"<ul> <li>No longer messing with root logger, playing safe as a library (opt-in behavior when used as  module)</li> </ul>"},{"location":"changelog/#118-2020-08-13","title":"[1.1.8] - 2020-08-13","text":""},{"location":"changelog/#added_26","title":"Added","text":"<ul> <li>Fixed up <code>--major</code> constraint to work more correctly</li> <li>Use GraphQL API (GitHub) when deep searching tags is required (faster <code>--major</code>)</li> <li>Paginate across tags when a release matching constraints is not present in the feed (GitHub) #12</li> <li>Simple Python interface for update checks: <code>lastversion.has_update(repo, current_version)</code></li> <li>Various fixes</li> </ul>"},{"location":"changelog/#117-2020-08-07","title":"[1.1.7] - 2020-08-07","text":""},{"location":"changelog/#added_27","title":"Added","text":"<ul> <li>Aggregate older tags, up to one year, for better latest release detection (feed only)</li> </ul>"},{"location":"changelog/#116-2020-07-18","title":"[1.1.6] - 2020-07-18","text":""},{"location":"changelog/#added_28","title":"Added","text":"<ul> <li>General improvements for releases detection</li> <li>SourceForge projects support</li> </ul>"},{"location":"changelog/#115-2020-05-04","title":"[1.1.5] - 2020-05-04","text":""},{"location":"changelog/#added_29","title":"Added","text":"<ul> <li>Better detection of post-releases, e.g. Magento 2.3.4-p2 is the latest stable release for the <code>--major 2.3.4</code></li> <li>Added new <code>--format tag</code> switch to get just the latest release's tag name. Proven to be useful in  some cases</li> </ul>"},{"location":"changelog/#114-2020-04-23","title":"[1.1.4] - 2020-04-23","text":""},{"location":"changelog/#fixed_50","title":"Fixed","text":"<ul> <li>Fixed detecting non-GitHub repos and known URLs</li> <li>Improved RPM install by checking with RPM db and avoiding unnecessary downloads absent updates</li> </ul>"},{"location":"changelog/#113-2020-04-15","title":"[1.1.3] - 2020-04-15","text":""},{"location":"changelog/#fixed_51","title":"Fixed","text":"<ul> <li>Show error when no repo found (no results from search)</li> <li>Added spec_tag_no_prefix to JSON output</li> <li>Returning Null for license when it doesn't exist at release tag</li> </ul>"},{"location":"changelog/#112-2020-04-04","title":"[1.1.2] - 2020-04-04","text":""},{"location":"changelog/#fixed_52","title":"Fixed","text":"<ul> <li>Require requests&gt;=2.6.1 to compensate for cachecontrol bug</li> </ul>"},{"location":"changelog/#111-2020-03-31","title":"[1.1.1] - 2020-03-31","text":""},{"location":"changelog/#fixed_53","title":"Fixed","text":"<ul> <li>Do not output progressbar when downloading and no TTY available, e.g. for log output</li> </ul>"},{"location":"changelog/#110-2020-03-24","title":"[1.1.0] - 2020-03-24","text":""},{"location":"changelog/#added_30","title":"Added","text":"<ul> <li>Install action</li> <li>Progressbar for download action, when download size is known</li> </ul>"},{"location":"changelog/#101-2020-03-23","title":"[1.0.1] - 2020-03-23","text":""},{"location":"changelog/#fixed_54","title":"Fixed","text":"<ul> <li>Compatibility with older PyYAML</li> </ul>"},{"location":"changelog/#100-2020-03-23","title":"[1.0.0] - 2020-03-23","text":""},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>BREAKING release for Python consumers: The <code>latest</code> Python function now returns <code>Version</code> object instead of string, by default</li> </ul>"},{"location":"changelog/#added_31","title":"Added","text":"<ul> <li><code>test</code> command to see how a given tag would be parsed as version: <code>lastversion test 'release-3_0_2'</code></li> <li>Limited GitLab support</li> <li>Limited Mercurial web repos support</li> <li>Limited BitBucket support</li> <li>Use feeds where available, thus much, much faster while still precise</li> <li>Ability to pass <code>.yml</code> with <code>repo:</code> value inside. Other elements are merged into <code>--format json</code>  output. More on the wiki  on how useful it is</li> </ul>"},{"location":"license/","title":"License","text":"<pre><code>BSD 2-Clause License\n\nCopyright (c) 2019, Danila Vershinin\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"spec-preparing/","title":"Preparing SPEC files","text":"<p><code>lastversion</code> is capable of directly updating RPM .spec files with the latest release version:</p> <pre><code>lastversion foo.spec\n</code></pre> <p>It will update your .spec file with the newer project version, if available.</p> <p>This feature allows creating an easy automation for rebuilding package updates. You can set up a simple build pipeline via e.g. cron, to automatically build packages for new  versions.</p> <p>In general, you may not have to do any special changes in your <code>.spec</code> files. <code>lastversion</code> will  look at the <code>URL:</code> tag and check the latest release from that location, and update the <code>Version:</code>   tag if a more recent version is found.</p> <p>However, if you are working with projects hosted on GitHub, it is highly recommended to prepare  your <code>.spec</code> files in a special way.</p> <p>The recommended changes below will allow <code>lastversion</code> to work with your <code>.spec</code> file and discover  the GitHub repository in question, the current version and release tag. The release tag is very   important to be part of your build, because it helps to avoid breaking builds.</p>"},{"location":"spec-preparing/#lastversion-friendly-spec-changes","title":"lastversion-friendly spec changes","text":"<p>There are only a couple of modifications you must make to your <code>.spec</code> file in order to make it  <code>lastversion</code> friendly.</p>"},{"location":"spec-preparing/#for-github-projects","title":"For GitHub projects","text":"<p>The header of the .spec file must have the following macros defined:</p> <pre><code>%global upstream_github &lt;repository owner&gt;\n</code></pre> <p>The <code>%upstream_github</code> is static and defines the owner of a GitHub repository, e.g. for <code>google/brotli</code> repository, you will have:</p> <pre><code>%global upstream_github brotli\n</code></pre> <p><code>lastversion</code> constructs the complete GitHub repo name by looking at the values of the <code>upstream_github</code> macro and the <code>Name:</code> tag. If the package name and GitHub repository <code>Name:</code> of your package do not match, then specify another global with the GitHub repo name:</p> <pre><code>%global upstream_name brotli\n</code></pre> <p>When you run <code>lastversion foo.spec</code>, it will automatically add <code>lastversion_tag</code> and <code>lastversion_dir</code> macros.  These globals, as well as <code>Version:</code> tag, are updated by <code>lastversion</code> with the proper values for the last release.</p> <p>The <code>URL:</code> and <code>Source0:</code> tags of your spec file must be put to the following form:</p> <pre><code>%global upstream_github &lt;repository owner&gt;\n%global lastversion_tag x\n%global lastversion_dir x\nName:           &lt;name&gt;\nURL:            https://github.com/%{upstream_github}/%{name}\nSource0:        %{url}/archive/%{lastversion_tag}/%{name}-%{lastversion_tag}.tar.gz\n</code></pre> <p>Finally, use <code>lastversion_dir</code> macro in the <code>%prep</code> section to properly specify extracted name directory:</p> <p>Example:</p> <pre><code>%prep\n%autosetup -n %{lastversion_dir}\n</code></pre> <p>And reference it in the spec file appropriately, if needed.</p> <p>These simple changes will guarantee that no matter what tag schemes the upstream uses, your new version builds will be successful!</p>"},{"location":"spec-preparing/#for-non-github-projects","title":"For non-GitHub projects","text":"<p>Specify <code>lastversion_repo</code> macro inside the spec file so that <code>lastversion</code> knows which project to check for latest version and subsequently update the <code>Version:</code> tag for it.</p> <p>Example:</p> <pre><code>%global lastversion_repo monit\n</code></pre>"},{"location":"spec-preparing/#spec-changes-for-module-builds","title":"Spec changes for module builds","text":"<p>When you build a module of software, slightly different spec changes are required. You can find the example under <code>tests/nginx-module-immutable</code>, which is a spec file for building the immutable NGINX module</p> <pre><code>#############################################\n%global upstream_github GetPageSpeed\n%global upstream_name ngx_immutable\n#############################################\n%global upstream_version x\n############################################\n</code></pre> <p>Here, we defined <code>upstream_name</code> global, because the package name is <code>nginx-module-immutable</code> while the short name of the GitHub repo is <code>ngx_immutable</code>.</p> <p>The notable change when building a module is an extra <code>upstream_version</code> macro. For module spec files, this is where <code>lastversion</code> will write the new version. Your <code>Version:</code> tag will stay static between different versions, and must have the form that includes macros for the version of the parent software and the module, e.g.:</p> <pre><code>%global upstream_version x  # &lt;-- filled by `lastversion`\nVersion: %{nginx_version}+%{upstream_version}\n</code></pre> <p>Updating the parent software version is not in the scope of this article. But you can also use <code>lastversion</code> to e.g. create a <code>-devel</code> package where the parent software's version is written to the appropriate (in this case, <code>nginx_version</code>) macro.</p>"},{"location":"spec-preparing/#specifying-command-line-arguments-within-spec-files","title":"Specifying command-line arguments within <code>.spec</code> files","text":"<p><code>lastversion</code> will read some <code>.spec</code> defined globas and treat them as command-line arguments, including:</p> <ul> <li><code>lastversion_having_asset</code> is treated same as <code>--having-asset</code> command line argument</li> <li><code>lastversion_only</code> is treated same as <code>--only</code> command line argument</li> </ul> <p>Example:</p> <pre><code>%global lastversion_having_asset \"Linux 64 bit: Binary\"\n</code></pre> <p>In this example, \"Linux 64 bit: Binary\" is the asset name as it appears on  GitHub release page.</p>"},{"location":"reference/lastversion/","title":"lastversion.py","text":"<p>This is the main module of lastversion package. To use it, import it and invoke any function documented here. For example:</p> <pre><code>from lastversion import lastversion\nlastversion.has_update(repo='mautic/mautic', current_version='1.2.3')\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.build_changelog_bullets","title":"<code>build_changelog_bullets(res, repo_arg)</code>","text":"<p>Build changelog bullets for a release dict using upstream notes and OpenAI.</p> <p>Returns:</p> Type Description <p>list[str] or None</p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def build_changelog_bullets(res, repo_arg):\n    \"\"\"Build changelog bullets for a release dict using upstream notes and OpenAI.\n\n    Returns:\n        list[str] or None\n    \"\"\"\n    try:\n        raw_notes = res.get(\"body\") or res.get(\"description\")\n    except AttributeError:\n        raw_notes = None\n\n    if not raw_notes:\n        return None\n\n    try:\n        context = {\n            \"repo\": res.get(\"from\"),\n            \"tag\": res.get(\"tag_name\"),\n            \"version\": str(res.get(\"version\")),\n            \"source\": res.get(\"source\"),\n        }\n        return generate_changelog(raw_notes, context)\n    except Exception:\n        return None\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.check_version","title":"<code>check_version(value)</code>","text":"<p>Given a version string, raises argparse.ArgumentTypeError if it does not contain any version. In lastversion CLI app, this is used as argument parser helper for --newer-than (-gt) option.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>Free-format string which is meant to contain a user-supplied version</p> required <p>Raises:</p> Type Description <code>ArgumentTypeError</code> <p>Exception in a case version was not found in the input string</p> <p>Returns:</p> Name Type Description <code>Version</code> <p>Parsed version object</p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def check_version(value):\n    \"\"\"Given a version string, raises argparse.ArgumentTypeError if it does not contain any version.\n    In lastversion CLI app, this is used as argument parser helper for --newer-than (-gt) option.\n\n    Args:\n        value (str): Free-format string which is meant to contain a user-supplied version\n\n    Raises:\n        argparse.ArgumentTypeError: Exception in a case version was not found in the input string\n\n    Returns:\n        Version: Parsed version object\n\n    \"\"\"\n    value = parse_version(value)\n    if not value:\n        raise argparse.ArgumentTypeError(\"%s is an invalid version value\" % value)\n    return value\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.find_preferred_url","title":"<code>find_preferred_url(spec_urls)</code>","text":"<p>Given a list of URLs of a project, return preferred one that might lead to version info. Basically returns the first URL that matches a handler by matching its primary domain.</p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def find_preferred_url(spec_urls):\n    \"\"\"\n    Given a list of URLs of a project, return preferred one that might lead to version info.\n    Basically returns the first URL that matches a handler by matching its primary domain.\n    \"\"\"\n    # TODO: use rpmspec --parse if failed to get lastversion_repo inside spec (includes macro)\n    for url in spec_urls:\n        # parse URL and get domain\n        parsed = urlparse(url)\n        hostname = parsed.hostname\n        # enumerate holders, and see if any of them can handle this domain\n        for holder in HolderFactory.HOLDERS.values():\n            if holder.DEFAULT_HOSTNAME and holder.DEFAULT_HOSTNAME == hostname:\n                return url\n    return spec_urls[0] if spec_urls else None\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.get_repo_data_from_spec","title":"<code>get_repo_data_from_spec(rpmspec_filename)</code>","text":"<p>Extracts repo data and CLI args from .spec file</p> <p>The project (repo) is specified inside the .spec file GitHub repo is resolved via %{upstream_github} + %{name}/%{upstream_name} No upstream_github global means that the spec was not prepared for lastversion Optional: use of spec_tag macros if the source is from GitHub. In edge cases we check new version via GitHub, but prepared sources are elsewhere</p> <p>Parameters:</p> Name Type Description Default <code>rpmspec_filename</code> required <p>Returns:</p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def get_repo_data_from_spec(rpmspec_filename):\n    \"\"\"\n    Extracts repo data and CLI args from .spec file\n\n    The project (repo) is specified inside the .spec file\n    GitHub repo is resolved via %{upstream_github} + %{name}/%{upstream_name}\n    No upstream_github global means that the spec was not prepared for lastversion\n    Optional: use of spec_tag macros if the source is from GitHub. In edge cases we check\n    new version via GitHub, but prepared sources are elsewhere\n\n    Args:\n        rpmspec_filename:\n\n    Returns:\n\n    \"\"\"\n    repo_data = {}\n    with open(rpmspec_filename) as f:\n        name = None\n        upstream_github = None\n        upstream_name = None\n        current_version = None\n        spec_repo = None\n        spec_urls = []\n        for line in f.readlines():\n            if line.startswith(\"%global lastversion_repo\"):\n                spec_repo = shlex.split(line)[2].strip()\n            elif line.startswith(\"%global upstream_github\"):\n                upstream_github = shlex.split(line)[2].strip()\n            elif line.startswith(\"%global upstream_name\"):\n                upstream_name = shlex.split(line)[2].strip()\n            elif line.startswith(\"Name:\"):\n                name = line.split(\"Name:\")[1].strip()\n            elif line.startswith(\"URL:\"):\n                # append to spec_urls\n                spec_urls.append(line.split(\"URL:\")[1].strip())\n            elif line.startswith(\"Source0:\"):\n                source0 = line.split(\"Source0:\")[1].strip()\n                # noinspection HttpUrlsUsage\n                if source0.startswith(\"https://\") or source0.startswith(\"http://\"):\n                    spec_urls.append(source0)\n            elif line.startswith(\"%global upstream_version \"):\n                current_version = shlex.split(line)[2].strip()\n                # influences %spec_tag to use %upstream_version instead of %version\n                repo_data[\"module_of\"] = True\n            elif line.startswith(\"Version:\") and not current_version:\n                current_version = line.split(\"Version:\")[1].strip()\n            elif line.startswith(\"%global lastversion_only\"):\n                repo_data[\"only\"] = shlex.split(line)[2].strip()\n            elif line.startswith(\"%global lastversion_having_asset\"):\n                repo_data[\"having_asset\"] = shlex.split(line)[2].strip()\n            elif line.startswith(\"%global lastversion_major\"):\n                repo_data[\"major\"] = shlex.split(line)[2].strip()\n            elif line.startswith(\"%global lastversion_formal\"):\n                value = shlex.split(line)[2].strip()\n                low = value.lower()\n                if low in [\"1\", \"true\", \"yes\", \"on\"]:\n                    repo_data[\"formal\"] = True\n                elif low in [\"0\", \"false\", \"no\", \"off\"]:\n                    repo_data[\"formal\"] = False\n                else:\n                    # Any non-empty string defaults to True for safety\n                    repo_data[\"formal\"] = bool(value)\n\n        if not current_version:\n            log.critical(\n                \"Did not find neither Version: nor %upstream_version in the spec file\"\n            )\n            sys.exit(1)\n        try:\n            if current_version != \"x\":\n                repo_data[\"current_version\"] = Version(current_version)\n        except InvalidVersion:\n            log.critical(\n                \"Failed to parse current version in %s. Tried %s\",\n                rpmspec_filename,\n                current_version,\n            )\n            sys.exit(1)\n        if upstream_name:\n            repo_data[\"name\"] = upstream_name\n            repo_data[\"spec_name\"] = \"%{upstream_name}\"\n        else:\n            repo_data[\"name\"] = name\n            repo_data[\"spec_name\"] = \"%{name}\"\n\n        if upstream_github:\n            repo = f\"{upstream_github}/{repo_data['name']}\"\n            log.info(\"Discovered GitHub repo %s from .spec file\", repo)\n        elif spec_repo:\n            repo = spec_repo\n            log.info(\"Discovered explicit repo %s from .spec file\", repo)\n        else:\n            repo = find_preferred_url(spec_urls)\n\n        if not repo:\n            log.critical(\n                \"Failed to determine repo from %s. Please prepare your spec file using instructions: \"\n                \"https://lastversion.getpagespeed.com/spec-preparing.html\",\n                rpmspec_filename,\n            )\n            sys.exit(1)\n\n        repo_data[\"repo\"] = repo\n        return repo_data\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.get_repo_data_from_yml","title":"<code>get_repo_data_from_yml(repo)</code>","text":"<p>Get repo data from YAML file.</p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def get_repo_data_from_yml(repo):\n    \"\"\"Get repo data from YAML file.\"\"\"\n    with open(repo) as fpi:\n        repo_data = yaml.safe_load(fpi)\n        if \"repo\" in repo_data:\n            if \"nginx-extras\" in repo:\n                repo_data[\"module_of\"] = \"nginx\"\n            name = os.path.splitext(os.path.basename(repo))[0]\n            if \"module_of\" in repo_data:\n                name = f'{repo_data[\"module_of\"]}-module-{name}'\n            repo_data[\"name\"] = name\n    return repo_data\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.get_rpm_packager","title":"<code>get_rpm_packager()</code>","text":"<p>Get RPM packager name from ~/.rpmmacros</p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def get_rpm_packager():\n    \"\"\"Get RPM packager name from ~/.rpmmacros\"\"\"\n    try:\n        rpmmacros = expanduser(\"~\") + \"/.rpmmacros\"\n        with open(rpmmacros) as f:\n            for ln in f.readlines():\n                if ln.startswith(\"%packager\"):\n                    return ln.split(\"%packager\")[1].strip()\n    except IOError:\n        log.warning(\"~/.rpmmacros does not exist. Changelog will not be generated\")\n    return None\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.has_update","title":"<code>has_update(repo, current_version, pre_ok=False, at=None)</code>","text":"<p>Given an existing version for a repo, checks if there is an update.</p> <p>Parameters:</p> Name Type Description Default <code>repo</code> <code>str</code> <p>Repository specifier in any form.</p> required <code>current_version</code> <code>str</code> <p>A version you want to check update for.</p> required <code>pre_ok</code> <code>bool</code> <p>Specifies whether pre-releases can be accepted as a newer version.</p> <code>False</code> <code>at</code> <code>str</code> <p>Specifies repo hosting more precisely, only useful if repo argument was       specified as one word.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Version</code> <p>Newer version as an object, if found. Otherwise, False</p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def has_update(repo, current_version, pre_ok=False, at=None):\n    \"\"\"Given an existing version for a repo, checks if there is an update.\n\n    Args:\n        repo (str): Repository specifier in any form.\n        current_version (str): A version you want to check update for.\n        pre_ok (bool): Specifies whether pre-releases can be accepted as a newer version.\n        at (str): Specifies repo hosting more precisely, only useful if repo argument was\n                  specified as one word.\n\n    Returns:\n        Version: Newer version as an object, if found. Otherwise, False\n\n    \"\"\"\n    latest_version = latest(repo, output_format=\"version\", pre_ok=pre_ok, at=at)\n    if latest_version and latest_version &gt; Version(current_version):\n        return latest_version\n    return False\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.install_app_image","title":"<code>install_app_image(url, install_name)</code>","text":"<p>Install an AppImage from a URL to <code>~/Applications/&lt;install_name&gt;</code></p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL where AppImage file is hosted</p> required <code>install_name</code> <code>str</code> <p>Short name that the AppImage will be renamed to</p> required Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def install_app_image(url, install_name):\n    \"\"\"Install an AppImage from a URL to `~/Applications/&lt;install_name&gt;`\n\n    Args:\n        url (str): URL where AppImage file is hosted\n        install_name (str): Short name that the AppImage will be renamed to\n    \"\"\"\n    if not install_name.endswith(\".AppImage\"):\n        install_name += \".AppImage\"\n    app_file_name = install_standalone_binary(url, install_name)\n    extract_appimage_desktop_file(app_file_name)\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.install_release","title":"<code>install_release(res, args)</code>","text":"<p>Install latest release</p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def install_release(res, args):\n    \"\"\"Install latest release\"\"\"\n    app_images = [asset for asset in res[\"assets\"] if asset.endswith(\".AppImage\")]\n    if app_images:\n        return install_app_image(\n            app_images[0], install_name=res.get(\"install_name\", args.repo)\n        )\n\n    rpms = [asset for asset in res[\"assets\"] if asset.endswith(\".rpm\")]\n    if rpms:\n        return install_rpms(res, rpms, args)\n\n    # static files are those without an extension\n    static_binaries = [\n        asset for asset in res[\"assets\"] if \".\" not in asset.rsplit(\"/\", 1)[-1]\n    ]\n    if static_binaries:\n        return install_standalone_binary(\n            static_binaries[0], install_name=res.get(\"install_name\", args.repo)\n        )\n\n    log.error(\"No installable assets found to install\")\n    sys.exit(1)\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.install_rpms","title":"<code>install_rpms(res, rpms, args)</code>","text":"<p>Install RPMs using package manager</p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def install_rpms(res, rpms, args):\n    \"\"\"Install RPMs using package manager\"\"\"\n    # prevents downloading large packages if we already have newest installed\n    # consult RPM database  for current version\n    installed_version = rpm_installed_version(args.repo)\n    if installed_version is False:\n        log.warning(\n            \"Please install lastversion using YUM or DNF so it can check current \"\n            \"program version. This is helpful to prevent unnecessary downloads\"\n        )\n    if installed_version and Version(installed_version) &gt;= Version(res[\"version\"]):\n        log.warning(\"Newest version %s is already installed\", installed_version)\n        sys.exit(0)\n    # pass RPM URLs directly to package management program\n    try:\n        import subprocess\n\n        params = [\"yum\", \"install\"]\n        params.extend(rpms)\n        if args.assumeyes:\n            params.append(\"-y\")\n        subprocess.call(params)\n    except OSError:\n        log.critical(\"Failed to launch package manager. Only YUM/DNF is supported!\")\n        sys.exit(1)\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.install_standalone_binary","title":"<code>install_standalone_binary(url, install_name)</code>","text":"<p>Install a standalone binary from a URL to <code>~/Applications/&lt;install_name&gt;</code></p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL where the binary file is hosted</p> required <code>install_name</code> <code>str</code> <p>Filename that the binary will be renamed to</p> required Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def install_standalone_binary(url, install_name):\n    \"\"\"Install a standalone binary from a URL to `~/Applications/&lt;install_name&gt;`\n\n    Args:\n        url (str): URL where the binary file is hosted\n        install_name (str): Filename that the binary will be renamed to\n    \"\"\"\n    home_dir = os.path.expanduser(\"~\")\n    apps_dir = os.path.join(home_dir, \"Applications\")\n    app_file_name = os.path.join(apps_dir, install_name)\n\n    Path(apps_dir).mkdir(exist_ok=True, parents=True)\n    download_file(url, app_file_name)\n    os.chmod(app_file_name, 0o755)  # skipcq: BAN-B103\n    return app_file_name\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.latest","title":"<code>latest(repo, output_format='version', pre_ok=False, assets_filter=None, short_urls=False, major=None, only=None, at=None, having_asset=None, exclude=None, even=False, formal=False, changelog=False)</code>","text":"<p>Find the latest release version for a project.</p> <p>Parameters:</p> Name Type Description Default <code>major</code> <code>str</code> <p>Only consider versions which are \"descendants\" of this major version string</p> <code>None</code> <code>short_urls</code> <code>bool</code> <p>Whether we should try to return shorter URLs for release data</p> <code>False</code> <code>assets_filter</code> <code>Union[str, Pattern]</code> <p>Regular expression for filtering assets for the latest release</p> <code>None</code> <code>only</code> <code>str</code> <p>Only consider tags with this text. Useful for repos with multiple projects.         The argument supports negation and regular expressions. To indicate a regex,         start it with tilde sign, to negate the expression, start it with exclamation         point. See <code>Examples</code>.</p> <code>None</code> <code>repo</code> <code>str</code> <p>Repository specifier in any form.</p> required <code>output_format</code> <code>str</code> <p>Affects the return format. Possible values <code>version</code>, <code>json</code>, <code>dict</code>,                  <code>assets</code>, <code>source</code>, <code>tag</code>.</p> <code>'version'</code> <code>pre_ok</code> <code>bool</code> <p>Specifies whether pre-releases can be accepted as a newer version.</p> <code>False</code> <code>at</code> <code>str</code> <p>Specifies repo hosting more precisely, only useful if repo argument was       specified as one word.</p> <code>None</code> <code>having_asset</code> <code>Union[str, bool]</code> <p>Only consider releases with the given asset.                              Pass <code>True</code> for any asset</p> <code>None</code> <code>exclude</code> <code>str</code> <p>Only consider releases NOT containing this text/regular expression.</p> <code>None</code> <code>even</code> <code>bool</code> <p>Consider as stable only releases with even minor component, e.g. 1.2.3</p> <code>False</code> <code>formal</code> <code>bool</code> <p>Consider as stable only releases with formal tags set up in Web UI</p> <code>False</code> <code>changelog</code> <code>bool</code> <p>Populate release[\"changelog\"] using upstream notes (if True)</p> <code>False</code> <p>Examples:</p> <p>Find the latest version of Mautic, it is OK to consider betas.</p> <pre><code>&gt;&gt;&gt; latest(\"mautic/mautic\", output_format='version', pre_ok=True)\n&lt;Version('4.4.4')&gt;\n</code></pre> <p>Consider only tags without letters:</p> <pre><code>&gt;&gt;&gt; latest(\"openssl/openssl\", output_format='version', only=r'!~\\w')\n&lt;Version('3.0.7')&gt;\n</code></pre> <p>Returns:</p> Type Description <p>Union[Version, dict]: Newer version object, if found and <code>output_format</code> is <code>version</code>.</p> <p>Returns:     str: Single string containing tag, if found and <code>output_format</code> is <code>tag</code></p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def latest(\n    repo,\n    output_format=\"version\",\n    pre_ok=False,\n    assets_filter=None,\n    short_urls=False,\n    major=None,\n    only=None,\n    at=None,\n    having_asset=None,\n    exclude=None,\n    even=False,\n    formal=False,\n    changelog=False,\n):\n    r\"\"\"Find the latest release version for a project.\n\n    Args:\n        major (str): Only consider versions which are \"descendants\" of this\n          major version string\n        short_urls (bool): Whether we should try to return shorter URLs for\n          release data\n        assets_filter (Union[str, Pattern]): Regular expression for filtering\n          assets for the latest release\n        only (str): Only consider tags with this text. Useful for repos with multiple projects.\n                    The argument supports negation and regular expressions. To indicate a regex,\n                    start it with tilde sign, to negate the expression, start it with exclamation\n                    point. See `Examples`.\n        repo (str): Repository specifier in any form.\n        output_format (str): Affects the return format. Possible values `version`, `json`, `dict`,\n                             `assets`, `source`, `tag`.\n        pre_ok (bool): Specifies whether pre-releases can be accepted as a newer version.\n        at (str): Specifies repo hosting more precisely, only useful if repo argument was\n                  specified as one word.\n        having_asset (Union[str, bool]): Only consider releases with the given asset.\n                                         Pass `True` for any asset\n        exclude (str): Only consider releases NOT containing this text/regular expression.\n        even (bool): Consider as stable only releases with even minor component, e.g. 1.2.3\n        formal (bool): Consider as stable only releases with formal tags set up in Web UI\n        changelog (bool): Populate release[\"changelog\"] using upstream notes (if True)\n\n    Examples:\n        Find the latest version of Mautic, it is OK to consider betas.\n\n        &gt;&gt;&gt; latest(\"mautic/mautic\", output_format='version', pre_ok=True)\n        &lt;Version('4.4.4')&gt;\n\n        Consider only tags without letters:\n\n        &gt;&gt;&gt; latest(\"openssl/openssl\", output_format='version', only=r'!~\\w')\n        &lt;Version('3.0.7')&gt;\n\n    Returns:\n        Union[Version, dict]: Newer version object, if found and `output_format` is `version`.\n    Returns:\n        str: Single string containing tag, if found and `output_format` is `tag`\n\n    \"\"\"\n    repo_data = {}\n\n    # noinspection HttpUrlsUsage\n    if repo.endswith(\".yml\") and not repo.startswith((\"http://\", \"https://\")):\n        repo_data = get_repo_data_from_yml(repo)\n\n    # noinspection HttpUrlsUsage\n    if repo.startswith((\"http://\", \"https://\")) and repo.endswith(\"Chart.yaml\"):\n        at = \"helm_chart\"\n\n    if repo.endswith(\".spec\"):\n        repo_data = get_repo_data_from_spec(rpmspec_filename=repo)\n\n    with HolderFactory.get_instance_for_repo(\n        repo_data.get(\"repo\", repo), at=at\n    ) as project:\n        project.set_only(repo_data.get(\"only\", only))\n        project.set_exclude(exclude)\n        project.set_having_asset(repo_data.get(\"having_asset\", having_asset))\n        project.set_even(even)\n        project.set_formal(repo_data.get(\"formal\", formal))\n        release = project.get_latest(pre_ok=pre_ok, major=repo_data.get(\"major\", major))\n\n        # bail out, found nothing that looks like a release\n        if not release:\n            return None\n\n        from_type = f\"Located the latest release tag {release['tag_name']} at: {project.get_canonical_link()}\"\n        if \"type\" in release:\n            from_type = f\"{from_type} via {release['type']} mechanism\"\n        log.info(from_type)\n\n        version = release[\"version\"]\n        tag = release[\"tag_name\"]\n\n        # return the release if we've reached far enough:\n        if output_format == \"version\":\n            return version\n\n        if output_format in [\"json\", \"dict\"]:\n            if output_format == \"dict\":\n                release[\"version\"] = version\n            else:\n                release[\"version\"] = str(version)\n                if \"tag_date\" in release:\n                    release[\"tag_date\"] = str(release[\"tag_date\"])\n            release[\"v_prefix\"] = tag.startswith(\"v\")\n            version_macro = (\n                \"upstream_version\" if \"module_of\" in repo_data else \"version\"\n            )\n            version_macro = f\"%{{{version_macro}}}\"\n            holder_i = {value: key for key, value in HolderFactory.HOLDERS.items()}\n            release[\"source\"] = holder_i[type(project)]\n            release[\"spec_tag\"] = tag.replace(str(version), version_macro)\n            # spec_tag_no_prefix is the helpful macro that will allow us to know where tarball\n            # extracts to (GitHub-specific)\n            if release[\"spec_tag\"].startswith(f\"v{version_macro}\") or re.match(\n                r\"^v\\d\", release[\"spec_tag\"]\n            ):\n                release[\"spec_tag_no_prefix\"] = release[\"spec_tag\"].lstrip(\"v\")\n            else:\n                release[\"spec_tag_no_prefix\"] = release[\"spec_tag\"]\n            release[\"tag_name\"] = tag\n            if hasattr(project, \"repo_license\"):\n                release[\"license\"] = project.repo_license(tag)\n            if hasattr(project, \"repo_readme\"):\n                release[\"readme\"] = project.repo_readme(tag)\n            if changelog:\n                text, source = project.collect_release_notes(tag, release)\n                if text:\n                    context = {\n                        \"repo\": project.get_canonical_link(),\n                        \"tag\": tag,\n                        \"version\": str(release[\"version\"]),\n                        \"source\": release.get(\"source\"),\n                    }\n                    try:\n                        bullets = generate_changelog(text, context)\n                        if bullets:\n                            release[\"changelog\"] = bullets\n                            release[\"changelog_source\"] = source\n                    except Exception:\n                        pass\n            release.update(repo_data)\n            try:\n                release[\"assets\"] = project.get_assets(\n                    release, short_urls, assets_filter\n                )\n            except NotImplementedError:\n                pass\n            release[\"from\"] = project.get_canonical_link()\n\n            if \"license\" in release and release[\"license\"]:\n                spdx_id = release[\"license\"].get(\"license\", {}).get(\"spdx_id\")\n                rpmspec_licence = (\n                    rpmspec_licenses[spdx_id] if spdx_id in rpmspec_licenses else None\n                )\n                if rpmspec_licence:\n                    release[\"rpmspec_license\"] = rpmspec_licence\n\n            release[\"source_url\"] = project.release_download_url(release, short_urls)\n\n            return release\n\n        if output_format == \"assets\":\n            return project.get_assets(release, short_urls, assets_filter)\n\n        if output_format == \"source\":\n            return project.release_download_url(release, short_urls)\n\n        if output_format == \"tag\":\n            return tag\n\n    return None\n</code></pre>"},{"location":"reference/lastversion/#lastversion.lastversion.parse_version","title":"<code>parse_version(tag)</code>","text":"<p>Parse version to a Version object. Argument may not be a version but a URL or a repo name, in which case return False E.g., used in lastversion repo-name -gt 1.2.3 (and repo-name is passed here as tag)</p> Source code in <code>src/lastversion/lastversion.py</code> <pre><code>def parse_version(tag):\n    \"\"\"\n    Parse version to a Version object.\n    Argument may not be a version but a URL or a repo name, in which case return False\n    E.g., used in lastversion repo-name -gt 1.2.3 (and repo-name is passed here as tag)\n    \"\"\"\n    # If a URL is passed\n    if tag.startswith((\"http://\", \"https://\")):\n        return False\n    # If a repo name is passed, e.g. \"mautic/mautic\"\n    if \"/\" in tag and \" \" not in tag:\n        return False\n    h = TestProjectHolder()\n    v = h.sanitize_version(tag, pre_ok=True)\n    return v\n</code></pre>"},{"location":"reference/lastversion/#rpm-changelog-generation","title":"RPM changelog generation","text":"<p>When updating a <code>.spec</code> file, you can ask lastversion to generate a concise RPM <code>%changelog</code> entry from upstream release notes:</p> <pre><code>lastversion path/to/package.spec --changelog\n</code></pre> <p>Environment variables:</p> <ul> <li><code>OPENAI_API_KEY</code> or <code>LASTVERSION_OPENAI_API_KEY</code></li> <li><code>LASTVERSION_OPENAI_MODEL</code> (default: <code>gpt-4o-mini</code>)</li> </ul> <p>Behavior:</p> <ul> <li>Tries conventional changelog files at the tag (e.g., <code>CHANGELOG.md</code>, <code>NEWS</code>) via raw Git first, then falls back to API.</li> <li>Produces 1\u20137 short bullets focusing on user-facing changes, fixes, security, and compatibility.</li> <li>Falls back to a single line <code>- upstream release v&lt;version&gt;</code> if upstream notes are unavailable or the API call fails.</li> </ul>"},{"location":"reference/version/","title":"version.py","text":"<p>Version class for lastversion</p>"},{"location":"reference/version/#lastversion.version.Version","title":"<code>Version</code>","text":"<p>               Bases: <code>Version</code></p> <p>This class abstracts handling of a project's versions. It implements the scheme defined in PEP 440. A <code>Version</code> instance is comparison-aware and can be compared and sorted using the standard Python interfaces.</p> <p>This class is descendant from <code>Version</code> found in <code>packaging.version</code>, and implements some additional normalization during instantiation.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>The string representation of a version which will be           parsed and normalized before use.</p> required <p>Raises:     InvalidVersion: If the `version`` does not conform to PEP 440 in                     any way, then this exception will be raised.</p> Source code in <code>src/lastversion/version.py</code> <pre><code>class Version(PackagingVersion):\n    \"\"\"\n    This class abstracts handling of a project's versions. It implements the\n    scheme defined in PEP 440. A `Version` instance is comparison-aware and\n    can be compared and sorted using the standard Python interfaces.\n\n    This class is descendant from `Version` found in `packaging.version`,\n    and implements some additional normalization during instantiation.\n\n    Args:\n        version (str): The string representation of a version which will be\n                      parsed and normalized before use.\n    Raises:\n        InvalidVersion: If the `version`` does not conform to PEP 440 in\n                        any way, then this exception will be raised.\n    \"\"\"\n\n    # Precompile the regular expressions\n    rc_pattern = re.compile(r\"^rc(\\d+)\\.\")\n    post_pattern = re.compile(r\"^p(\\d+)$\")\n\n    regex_dashed_substitutions = [\n        (re.compile(r\"-p(\\d+)$\"), \"-post\\\\1\"),\n        (re.compile(r\"-preview-(\\d+)\"), \"-pre\\\\1\"),\n        (re.compile(r\"-early-access-(\\d+)\"), \"-alpha\\\\1\"),\n        (re.compile(r\"-pre-(\\d+)\"), \"-pre\\\\1\"),\n        (re.compile(r\"-beta[-.]rc(\\d+)\"), \"-beta\\\\1\"),\n        (re.compile(r\"^pre-(.*)\"), \"\\\\1-pre0\"),\n    ]\n\n    part_to_pypi_dict = {\n        \"devel\": \"dev0\",\n        \"test\": \"dev0\",\n        \"dev\": \"dev0\",\n        \"alpha\": \"a0\",\n        \"beta\": \"b0\",\n        \"rc\": \"rc0\",\n        \"preview\": \"rc0\",\n        \"pre\": \"rc0\",\n    }\n\n    @staticmethod\n    def special_cases_transformation(version):\n        \"\"\"\n        Special cases for version transformation.\n        \" SP-\" =&gt; \".post\" (a Service Pack version is a post release)\n        \"\"\"\n        version = version.replace(\" SP-\", \".post\")\n\n        # Normalize generic update-style patterns like \"8u462-b08\" -&gt; \"8.462.post8\"\n        # Works regardless of vendor prefix/suffix (e.g., jdk8u462-b08, openjdk8u352-b01, 7u80-b15)\n        def _u_style_sub(match):\n            major = match.group(\"major\")\n            update = match.group(\"update\")\n            build = match.group(\"build\")\n            if build is not None:\n                try:\n                    build_int = int(build)\n                except ValueError:\n                    build_int = None\n                if build_int is not None and build_int &gt;= 0:\n                    return f\"{major}.{update}.post{build_int}\"\n            return f\"{major}.{update}\"\n\n        version = re.sub(\n            r\"(?i)(?P&lt;major&gt;\\d{1,3})u(?P&lt;update&gt;\\d{1,4})(?:[-_.]?b(?P&lt;build&gt;\\d{1,3}))?\",\n            _u_style_sub,\n            version,\n        )\n        return version\n\n    def fix_letter_post_release(self, match):\n        \"\"\"Fix letter post release\"\"\"\n        self.fixed_letter_post_release = True\n        return match.group(1) + \".post\" + str(ord(match.group(2)))\n\n    def is_semver(self):\n        \"\"\"Check if this a (shorthand) semantic version\"\"\"\n        return self.base_version.count(\".\") &gt;= 1\n\n    @staticmethod\n    def part_to_pypi(part):\n        \"\"\"\n        Convert a version part to a PyPI compatible string\n        See https://peps.python.org/pep-0440/\n        Helps devel releases to be correctly identified\n        See https://www.python.org/dev/peps/pep-0440/#developmental-releases\n        \"\"\"\n        # Lookup in the dictionary\n        if part in Version.part_to_pypi_dict:\n            return Version.part_to_pypi_dict[part]\n\n        # Check for rc patterns\n        rc_match = Version.rc_pattern.search(part)\n        if rc_match:\n            # rc2.windows.1 =&gt; rc2.post1\n            sub_parts = part.split(\".\")\n            part = sub_parts[0]\n            for sub in sub_parts[1:]:\n                if sub.isdigit():\n                    part += \".post\" + sub\n            return part\n\n        # Check for the post-patterns\n        post_match = Version.post_pattern.sub(r\"post\\1\", part)\n        if post_match != part:\n            return post_match\n\n        # If the part contains only alphabets, set it to None\n        if part.isalpha():\n            return None\n\n        return part\n\n    @staticmethod\n    def join_dashed_number_status(version):\n        \"\"\"\n        Join status with its number when separated by dash in a version string.\n        E.g., 4.27-chaos-preview-3 -&gt; 4.27-chaos-pre3\n        Helps devel releases to be correctly identified\n        # https://www.python.org/dev/peps/pep-0440/#developmental-releases\n\n        Args:\n            version:\n\n        Returns:\n            str:\n        \"\"\"\n        for regex, substitution in Version.regex_dashed_substitutions:\n            version = regex.sub(substitution, version)\n        return version\n\n    def filter_relevant_parts(self, version):\n        \"\"\"\n        Filter out irrelevant parts from version string.\n        Parse out version components separated by dash.\n        \"\"\"\n        parts = version.split(\"-\")\n\n        # go through parts which were separated by dash, normalize and\n        # exclude irrelevant\n        parts_n = []\n        for part in parts:\n            part = self.part_to_pypi(part)\n            if part:\n                parts_n.append(part)\n        if not parts_n:\n            raise InvalidVersion(f\"Invalid version: '{version}'\")\n        # Remove *any* non-digits which appear at the beginning of the\n        # version string e.g. Rhino1_7_13_Release does not even bother to\n        # put a delimiter... such string at the beginning typically do not\n        # convey stability level, so we are fine to remove them (unlike the\n        # ones in the tail)\n        parts_n[0] = re.sub(\"^[^0-9]+\", \"\", parts_n[0], 1)\n\n        # Remove empty elements\n        parts_n = [item for item in parts_n if item != \"\"]\n\n        # If more than 1 element and second element are a number, use only first\n        # e.g. 1.2.3-4 -&gt; 1.2.3\n        if len(parts_n) &gt; 1 and \".\" in parts_n[0] and parts_n[1].isdigit():\n            parts_n = parts_n[:1]\n\n        # go back to full string parse out\n        version = \".\".join(parts_n)\n        return version\n\n    def __init__(self, version, char_fix_required=False):\n        \"\"\"Instantiate the `Version` object.\n\n        Args:\n            version (str): The version-like string\n            char_fix_required (bool): Should we treat alphanumerics as part of version\n        \"\"\"\n        self.fixed_letter_post_release = False\n\n        version = self.special_cases_transformation(version)\n        # Join status with its number, e.g., preview-3 -&gt; pre3\n        version = self.join_dashed_number_status(version)\n        version = self.filter_relevant_parts(version)\n\n        if char_fix_required:\n            version = re.sub(\"(\\\\d)([a-z])$\", self.fix_letter_post_release, version, 1)\n        # release-3_0_2 is often seen on Mercurial holders note that the\n        # above code removes \"release-\" already, so we are left with \"3_0_2\"\n        if re.search(r\"^(?:\\d+_)+(?:\\d+)\", version):\n            version = version.replace(\"_\", \".\")\n        # finally, split by dot \"delimiter\", see if there are common words\n        # which are definitely removable\n        parts = version.split(\".\")\n        version = []\n        for p in parts:\n            if p.lower() in [\"release\"]:\n                continue\n            version.append(p)\n        version = \".\".join(version)\n        super().__init__(version)\n\n    @property\n    def epoch(self):\n        # type: () -&gt; int\n        \"\"\"\n        An integer giving the version epoch of this Version instance\n        \"\"\"\n        _epoch = self._version.epoch  # type: int\n        return _epoch\n\n    @property\n    def release(self):\n        \"\"\"\n        A tuple of integers giving the components of the release segment\n        of this Version instance; that is, the 1.2.3 part of the version\n        number, including trailing zeroes but not including the epoch or\n        any prerelease/development/post-release suffixes\n        \"\"\"\n        _release = self._version.release\n        return _release\n\n    @property\n    def pre(self):\n        _pre = self._version.pre\n        return _pre\n\n    @property\n    def post(self):\n        return self._version.post[1] if self._version.post else None\n\n    @property\n    def dev(self):\n        return self._version.dev[1] if self._version.dev else None\n\n    @property\n    def local(self):\n        if self._version.local:\n            return \".\".join(str(x) for x in self._version.local)\n        return None\n\n    @property\n    def major(self):\n        # type: () -&gt; int\n        return self.release[0] if len(self.release) &gt;= 1 else 0\n\n    @property\n    def minor(self):\n        # type: () -&gt; int\n        return self.release[1] if len(self.release) &gt;= 2 else 0\n\n    @property\n    def micro(self):\n        # type: () -&gt; int\n        return self.release[2] if len(self.release) &gt;= 3 else 0\n\n    @staticmethod\n    def is_not_date(num):\n        \"\"\"Helper function to determine if a number is not a date\"\"\"\n        num_str = str(num)\n        try:\n            # Attempt to parse the number as a date\n            datetime.strptime(num_str, \"%Y%m%d\")\n            return False\n        except ValueError:\n            # If parsing fails, the number is not a date\n            return True\n\n    @property\n    def is_prerelease(self):\n        \"\"\"\n        Version is a prerelease if it contains all the following:\n        * 90+ micro component\n        * no date in micro component\n\n        Returns:\n            bool:\n        \"\"\"\n        if (\n            self.major\n            and self.minor\n            and self.micro &gt;= 90\n            and self.is_not_date(self.micro)\n        ):\n            return True\n        return self.dev is not None or self.pre is not None\n\n    @property\n    def even(self):\n        \"\"\"Check if this is an even minor version\"\"\"\n        return self.minor and not self.minor % 2\n\n    def sem_extract_base(self, level=None):\n        \"\"\"\n        Return Version with desired semantic version level base\n        E.g., for 5.9.3 it will return 5.9 (patch is None)\n        \"\"\"\n        if level == \"major\":\n            # get major\n            return Version(str(self.major))\n        if level == \"minor\":\n            return Version(f\"{self.major}.{self.minor}\")\n        if level == \"patch\":\n            return Version(f\"{self.major}.{self.minor}.{self.micro}\")\n        return self\n\n    def __str__(self):\n        # type: () -&gt; str\n        parts = []\n\n        # Epoch\n        if self.epoch != 0:\n            parts.append(f\"{self.epoch}!\")\n\n        # Release segment\n        parts.append(\".\".join(str(x) for x in self.release))\n\n        # Pre-release\n        if self.pre is not None:\n            parts.append(\"\".join(str(x) for x in self.pre))\n\n        # Post-release\n        if self.post is not None:\n            if self.fixed_letter_post_release:\n                parts.append(f\"{chr(self.post)}\")\n            else:\n                parts.append(f\".post{self.post}\")\n\n        # Development release\n        if self.dev is not None:\n            parts.append(f\".dev{self.dev}\")\n\n        # Local version segment\n        if self.local is not None:\n            parts.append(f\"+{self.local}\")\n\n        return \"\".join(parts)\n</code></pre>"},{"location":"reference/version/#lastversion.version.Version.epoch","title":"<code>epoch</code>  <code>property</code>","text":"<p>An integer giving the version epoch of this Version instance</p>"},{"location":"reference/version/#lastversion.version.Version.even","title":"<code>even</code>  <code>property</code>","text":"<p>Check if this is an even minor version</p>"},{"location":"reference/version/#lastversion.version.Version.is_prerelease","title":"<code>is_prerelease</code>  <code>property</code>","text":"<p>Version is a prerelease if it contains all the following: * 90+ micro component * no date in micro component</p> <p>Returns:</p> Name Type Description <code>bool</code>"},{"location":"reference/version/#lastversion.version.Version.release","title":"<code>release</code>  <code>property</code>","text":"<p>A tuple of integers giving the components of the release segment of this Version instance; that is, the 1.2.3 part of the version number, including trailing zeroes but not including the epoch or any prerelease/development/post-release suffixes</p>"},{"location":"reference/version/#lastversion.version.Version.__init__","title":"<code>__init__(version, char_fix_required=False)</code>","text":"<p>Instantiate the <code>Version</code> object.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>The version-like string</p> required <code>char_fix_required</code> <code>bool</code> <p>Should we treat alphanumerics as part of version</p> <code>False</code> Source code in <code>src/lastversion/version.py</code> <pre><code>def __init__(self, version, char_fix_required=False):\n    \"\"\"Instantiate the `Version` object.\n\n    Args:\n        version (str): The version-like string\n        char_fix_required (bool): Should we treat alphanumerics as part of version\n    \"\"\"\n    self.fixed_letter_post_release = False\n\n    version = self.special_cases_transformation(version)\n    # Join status with its number, e.g., preview-3 -&gt; pre3\n    version = self.join_dashed_number_status(version)\n    version = self.filter_relevant_parts(version)\n\n    if char_fix_required:\n        version = re.sub(\"(\\\\d)([a-z])$\", self.fix_letter_post_release, version, 1)\n    # release-3_0_2 is often seen on Mercurial holders note that the\n    # above code removes \"release-\" already, so we are left with \"3_0_2\"\n    if re.search(r\"^(?:\\d+_)+(?:\\d+)\", version):\n        version = version.replace(\"_\", \".\")\n    # finally, split by dot \"delimiter\", see if there are common words\n    # which are definitely removable\n    parts = version.split(\".\")\n    version = []\n    for p in parts:\n        if p.lower() in [\"release\"]:\n            continue\n        version.append(p)\n    version = \".\".join(version)\n    super().__init__(version)\n</code></pre>"},{"location":"reference/version/#lastversion.version.Version.filter_relevant_parts","title":"<code>filter_relevant_parts(version)</code>","text":"<p>Filter out irrelevant parts from version string. Parse out version components separated by dash.</p> Source code in <code>src/lastversion/version.py</code> <pre><code>def filter_relevant_parts(self, version):\n    \"\"\"\n    Filter out irrelevant parts from version string.\n    Parse out version components separated by dash.\n    \"\"\"\n    parts = version.split(\"-\")\n\n    # go through parts which were separated by dash, normalize and\n    # exclude irrelevant\n    parts_n = []\n    for part in parts:\n        part = self.part_to_pypi(part)\n        if part:\n            parts_n.append(part)\n    if not parts_n:\n        raise InvalidVersion(f\"Invalid version: '{version}'\")\n    # Remove *any* non-digits which appear at the beginning of the\n    # version string e.g. Rhino1_7_13_Release does not even bother to\n    # put a delimiter... such string at the beginning typically do not\n    # convey stability level, so we are fine to remove them (unlike the\n    # ones in the tail)\n    parts_n[0] = re.sub(\"^[^0-9]+\", \"\", parts_n[0], 1)\n\n    # Remove empty elements\n    parts_n = [item for item in parts_n if item != \"\"]\n\n    # If more than 1 element and second element are a number, use only first\n    # e.g. 1.2.3-4 -&gt; 1.2.3\n    if len(parts_n) &gt; 1 and \".\" in parts_n[0] and parts_n[1].isdigit():\n        parts_n = parts_n[:1]\n\n    # go back to full string parse out\n    version = \".\".join(parts_n)\n    return version\n</code></pre>"},{"location":"reference/version/#lastversion.version.Version.fix_letter_post_release","title":"<code>fix_letter_post_release(match)</code>","text":"<p>Fix letter post release</p> Source code in <code>src/lastversion/version.py</code> <pre><code>def fix_letter_post_release(self, match):\n    \"\"\"Fix letter post release\"\"\"\n    self.fixed_letter_post_release = True\n    return match.group(1) + \".post\" + str(ord(match.group(2)))\n</code></pre>"},{"location":"reference/version/#lastversion.version.Version.is_not_date","title":"<code>is_not_date(num)</code>  <code>staticmethod</code>","text":"<p>Helper function to determine if a number is not a date</p> Source code in <code>src/lastversion/version.py</code> <pre><code>@staticmethod\ndef is_not_date(num):\n    \"\"\"Helper function to determine if a number is not a date\"\"\"\n    num_str = str(num)\n    try:\n        # Attempt to parse the number as a date\n        datetime.strptime(num_str, \"%Y%m%d\")\n        return False\n    except ValueError:\n        # If parsing fails, the number is not a date\n        return True\n</code></pre>"},{"location":"reference/version/#lastversion.version.Version.is_semver","title":"<code>is_semver()</code>","text":"<p>Check if this a (shorthand) semantic version</p> Source code in <code>src/lastversion/version.py</code> <pre><code>def is_semver(self):\n    \"\"\"Check if this a (shorthand) semantic version\"\"\"\n    return self.base_version.count(\".\") &gt;= 1\n</code></pre>"},{"location":"reference/version/#lastversion.version.Version.join_dashed_number_status","title":"<code>join_dashed_number_status(version)</code>  <code>staticmethod</code>","text":"<p>Join status with its number when separated by dash in a version string. E.g., 4.27-chaos-preview-3 -&gt; 4.27-chaos-pre3 Helps devel releases to be correctly identified</p>"},{"location":"reference/version/#lastversion.version.Version.join_dashed_number_status--httpswwwpythonorgdevpepspep-0440developmental-releases","title":"https://www.python.org/dev/peps/pep-0440/#developmental-releases","text":"<p>Parameters:</p> Name Type Description Default <code>version</code> required <p>Returns:</p> Name Type Description <code>str</code> Source code in <code>src/lastversion/version.py</code> <pre><code>@staticmethod\ndef join_dashed_number_status(version):\n    \"\"\"\n    Join status with its number when separated by dash in a version string.\n    E.g., 4.27-chaos-preview-3 -&gt; 4.27-chaos-pre3\n    Helps devel releases to be correctly identified\n    # https://www.python.org/dev/peps/pep-0440/#developmental-releases\n\n    Args:\n        version:\n\n    Returns:\n        str:\n    \"\"\"\n    for regex, substitution in Version.regex_dashed_substitutions:\n        version = regex.sub(substitution, version)\n    return version\n</code></pre>"},{"location":"reference/version/#lastversion.version.Version.part_to_pypi","title":"<code>part_to_pypi(part)</code>  <code>staticmethod</code>","text":"<p>Convert a version part to a PyPI compatible string See https://peps.python.org/pep-0440/ Helps devel releases to be correctly identified See https://www.python.org/dev/peps/pep-0440/#developmental-releases</p> Source code in <code>src/lastversion/version.py</code> <pre><code>@staticmethod\ndef part_to_pypi(part):\n    \"\"\"\n    Convert a version part to a PyPI compatible string\n    See https://peps.python.org/pep-0440/\n    Helps devel releases to be correctly identified\n    See https://www.python.org/dev/peps/pep-0440/#developmental-releases\n    \"\"\"\n    # Lookup in the dictionary\n    if part in Version.part_to_pypi_dict:\n        return Version.part_to_pypi_dict[part]\n\n    # Check for rc patterns\n    rc_match = Version.rc_pattern.search(part)\n    if rc_match:\n        # rc2.windows.1 =&gt; rc2.post1\n        sub_parts = part.split(\".\")\n        part = sub_parts[0]\n        for sub in sub_parts[1:]:\n            if sub.isdigit():\n                part += \".post\" + sub\n        return part\n\n    # Check for the post-patterns\n    post_match = Version.post_pattern.sub(r\"post\\1\", part)\n    if post_match != part:\n        return post_match\n\n    # If the part contains only alphabets, set it to None\n    if part.isalpha():\n        return None\n\n    return part\n</code></pre>"},{"location":"reference/version/#lastversion.version.Version.sem_extract_base","title":"<code>sem_extract_base(level=None)</code>","text":"<p>Return Version with desired semantic version level base E.g., for 5.9.3 it will return 5.9 (patch is None)</p> Source code in <code>src/lastversion/version.py</code> <pre><code>def sem_extract_base(self, level=None):\n    \"\"\"\n    Return Version with desired semantic version level base\n    E.g., for 5.9.3 it will return 5.9 (patch is None)\n    \"\"\"\n    if level == \"major\":\n        # get major\n        return Version(str(self.major))\n    if level == \"minor\":\n        return Version(f\"{self.major}.{self.minor}\")\n    if level == \"patch\":\n        return Version(f\"{self.major}.{self.minor}.{self.micro}\")\n    return self\n</code></pre>"},{"location":"reference/version/#lastversion.version.Version.special_cases_transformation","title":"<code>special_cases_transformation(version)</code>  <code>staticmethod</code>","text":"<p>Special cases for version transformation. \" SP-\" =&gt; \".post\" (a Service Pack version is a post release)</p> Source code in <code>src/lastversion/version.py</code> <pre><code>@staticmethod\ndef special_cases_transformation(version):\n    \"\"\"\n    Special cases for version transformation.\n    \" SP-\" =&gt; \".post\" (a Service Pack version is a post release)\n    \"\"\"\n    version = version.replace(\" SP-\", \".post\")\n\n    # Normalize generic update-style patterns like \"8u462-b08\" -&gt; \"8.462.post8\"\n    # Works regardless of vendor prefix/suffix (e.g., jdk8u462-b08, openjdk8u352-b01, 7u80-b15)\n    def _u_style_sub(match):\n        major = match.group(\"major\")\n        update = match.group(\"update\")\n        build = match.group(\"build\")\n        if build is not None:\n            try:\n                build_int = int(build)\n            except ValueError:\n                build_int = None\n            if build_int is not None and build_int &gt;= 0:\n                return f\"{major}.{update}.post{build_int}\"\n        return f\"{major}.{update}\"\n\n    version = re.sub(\n        r\"(?i)(?P&lt;major&gt;\\d{1,3})u(?P&lt;update&gt;\\d{1,4})(?:[-_.]?b(?P&lt;build&gt;\\d{1,3}))?\",\n        _u_style_sub,\n        version,\n    )\n    return version\n</code></pre>"}]}